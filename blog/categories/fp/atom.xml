<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: FP | Hackflow]]></title>
  <link href="http://hackflow.com/blog/categories/fp/atom.xml" rel="self"/>
  <link href="http://hackflow.com/"/>
  <updated>2015-03-08T21:12:01+07:00</updated>
  <id>http://hackflow.com/</id>
  <author>
    <name><![CDATA[Alexander Schepanovski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Boiling React Down to Few Lines in jQuery]]></title>
    <link href="http://hackflow.com/blog/2015/03/08/boiling-react-down-to-few-lines-in-jquery/"/>
    <updated>2015-03-08T20:08:00+07:00</updated>
    <id>http://hackflow.com/blog/2015/03/08/boiling-react-down-to-few-lines-in-jquery</id>
    <content type="html"><![CDATA[<p>You probably heard something like how React is awesome &lsquo;cause it makes UI a pure function of application state? But even before you started to get that it was complemented with something like how that works on top of immutability and virtual DOM? And then you get free save, load, undo and something insane called time-travel debugging on top of that. Guess what? None of these are necessary to use core React idea and reap its benefits. And I&rsquo;ll show that in a few lines in jQuery.</p>

<!--more-->


<p>```html
<span id="colored-counter">0</span>
<input id="color"></input>
<button id="inc"></button></p>

<script>
$('#color').on('keyup', function () {
    $('#colored-counter').css('color', this.value);
})

$('#inc').on('click', function () {
    var oldValue = $('#colored-counter').html();
    var newValue = 1 + Number(old);
    $('#colored-counter').html(newValue);
})
</script>


<p>```</p>

<p>Could be written as:</p>

<p>```html
<span id="colored-counter">0</span>
<input id="color"></input>
<button id="inc"></button></p>

<script>
var state = {color: '', value: 0};

function updateUI() {
    $('#colored-counter').css('color', state.color);
    $('#colored-counter').html(state.value);
}

$('#color').on('keyup', function () {
    state.color = this.value;
    updateUI();
})

$('#inc').on('click', function () {
    state.value++;
    updateUI();
})
</script>


<p>```</p>

<p>This demonstrates React idea in its simplest (and a bit bastardized way). We get to this later, now we should answer a reasonable question: how is this better?
Let me draw you a picture. This is how first variant works:</p>

<p><img src="http://hackflow.com/images/boiling-react-down/jquery-small.svg" style="width: 100%" /></p>

<p>And this is how second one does:</p>

<p><img src="http://hackflow.com/images/boiling-react-down/react-small.svg" style="width: 100%" /></p>

<p>Doesn&rsquo;t look that much better, but let us think scale. Over time our UI will get more events and elements, some events will update more than one element, some elements will be updated by more than one event. So we will get this:</p>

<p><img src="http://hackflow.com/images/boiling-react-down/jquery-big.svg" style="width: 100%" /></p>

<p>And even with our bastardized React-like code we get:</p>

<p><img src="http://hackflow.com/images/boiling-react-down/react-big.svg" style="width: 100%" /></p>

<p>In first picture we have <code>N</code> events, <code>M</code> elements and up to <code>O(N*M)</code> links.
In second one we have just <code>N</code> event links and <code>M</code> element links.
Overall we got from potential <code>O(N*M)</code> complexity down to <code>O(N+M)</code>, not bad for a simple trick.</p>

<p>Now it looks like we got something. But what about all those magical powers?
Ah, we almost got them too.</p>

<h2>Magical Powers</h2>

<p>Basically all magical powers mentioned come from an ability to write:</p>

<p>```js
// save
var cannedState = deepcopy(state);</p>

<p>// load
state = cannedState;
updateUI();
```</p>

<p>This is facilitated by 2 facts:</p>

<ul>
<li>we have a single explicit state,</li>
<li>we can update UI to comply to arbitrary state.</li>
</ul>


<p>That&rsquo;s it. We can write serialized canned state to local storage, send it to server, manage a history of canned states. And this will give us page reload protection, persistence and undo/time-travel respectively.</p>

<p>Confused? Let&rsquo;s write some code. That&rsquo;s how we protect from accidental page reload:</p>

<p>```js
function updateUI() {</p>

<pre><code>// Save latest state to local storage
LocalStorage.set('state', JSON.stringify(state));
// ... continue as usual
</code></pre>

<p>}</p>

<p>// Load saved state from local storage on page load
$(function () {</p>

<pre><code>state = JSON.parse(LocalStorage.get('state'));
updateUI();
</code></pre>

<p>});
```</p>

<p>And that&rsquo;s how we get time-travel debugging:</p>

<p>```html
<span id="time-pos"></span>
<button id="back">Back</button>
<button id="next">Next</button></p>

<script>
var time = {history: [], pos: 0};

function updateTimeUI() {
    $('#time-pos').html('Position ' + time.pos + ' of ' + time.history.length);
}

function saveState() {
    time.history.push(deepcopy(state));
    time.pos++;
    updateTimeUI();
}

$('#back').on('click', function () {
    // Move history pointer
    time.pos--;
    updateTimeUI();
    // Load historic state
    state = time.history[time.pos];
    updateUI();
})
$('#next').on('click', function () {
    time.pos++;
    // ... same
})

// ...

function updateUI() {
    // Save state to history on every change
    saveState();
    // ... continue as usual
}
</script>


<p>```</p>

<p>On each change of state we push its deep copy to history list and later we can restore that state by simply copying it from history and updating UI to fit it.</p>

<p>Note also how we use the same pattern here? <code>time</code> is the state of time-travel sub-application
and <code>updateTimeUI()</code> is its update function.</p>

<p>Now we can build from that. Undo is just time-travel for user not developer, by saving history to local storage we can preserve it on page reload, by catching errors and sending them along with serialized history to our bug tracker we can automatically reproduce errors our users face.</p>

<p>I should note that React doesn&rsquo;t have all these magical powers, at least out of the box, since it separates app state into pieces and hide it in components.</p>

<h2>Pure Function</h2>

<p>Why do we need pure functions, immutable data and virtual DOM? These are optimizations and to some extent simplifications, not core to idea. Still let&rsquo;s us follow the way that led to them.</p>

<p>First we need a slightly more intricate example:</p>

<p>```html
<span id="count">2</span></p>

<ul>
    <li>hi</li>
    <li>there</li>
</ul>


<p><button id="add"></button></p>

<script>
var state = {items: ['hi', 'there']}

function updateUI() {
    $('#count').html(state.items.length);
    // Compare ul.childNodes to state.items and make updates
    // ...
}

$('ul li').on('click', function () {
    state.items.splice(this.index, 1);
    updateUI();
})

$('#add').on('click', function () {
    state.items.push(getNextString());
    updateUI();
})
</script>


<p>```</p>

<p>Several things to see here:</p>

<ul>
<li>there is a duplication between prerendered html and initial state,</li>
<li>update became complex &lsquo;cause we need to compare data structure to DOM.</li>
</ul>


<p>There is a simpler way to do this:</p>

<p>```html</p>

<div id="ui"></div>


<p>&hellip;</p>

<script>
...

function render(state) {
    var span = '<span id="count">' + state.items.length + '</span>';
    var lis = state.items.map(function (item) {
        return '<li>' + item + '</li>';
    });
    return span + '<ul>' + lis.join('') + '</ul>'
}

function updateUI() {
    $('#ui').html(render(state));
}

...
</script>


<p>```</p>

<p>Here <code>render()</code> is just pure function from app state to html. And we want it to be pure so that
state will be the single thing defining UI.</p>

<p>In a way UI was a function of state even in our bastardized code, it just wasn&rsquo;t clearly obvious
&lsquo;cause we updated UI, not calculated and rebuilt it from scratch each time. There also was a possibility to screw up and write <code>updateUI()</code> so that UI state is defined both by its own previous state and application state, thus using render is not really an optimization, but a simplification and a guard.</p>

<p>But anyway that&rsquo;s it on pure functions.</p>

<h2>Virtual DOM</h2>

<p>Now look at those <code>render()</code> / <code>$().html()</code> pair, they build entire representation from scratch on each event, probably on every key press. This sounds slow, so we use another optimization &mdash; virtual DOM:</p>

<p>```js
var root = document.getElementById(&lsquo;ui&rsquo;);
var prevState = state, prevTree = [];</p>

<p>function render(state) {</p>

<pre><code>// Virtual DOM is really just a tree of JavaScript objects or arrays
return [
    ['span', {id: 'count'}, state.items.length],
    ['ul', {}, state.items.map(function (item) {
        return  ['li', {}, item]
    })]
]
</code></pre>

<p>}</p>

<p>function updateUI() {</p>

<pre><code>var vTree = render(state);
var diff = vDiff(prevTree, vTree); // Just a diff on data structures, haha :)
vApply(root, diff)                 // Apply series of patches to real DOM

prevState = deepcopy(state);
prevTree = vTree;
</code></pre>

<p>}
```</p>

<p>If any of this diffing/patching sounds complicated to you then you shouldn&rsquo;t worry React or <a href="https://github.com/Matt-Esch/virtual-dom">standalone virtual DOM implementation</a> got you covered. But that&rsquo;s really not that complicated. If you know how to write diffing algorithm then you can surely implement this yourself.</p>

<p>Note that what we just did is a premature optimization. Current simple example will do just fine
with naive render-to-string implementation above. Surprisingly, most of SPAs out there will do just
fine as well, browsers are hell fast these days. I want to stress this once more &ndash; for an average app you can skip React or other virtual DOM at start and only go for it once it gets too slow (or never).</p>

<p>Another stone in Reacts direction: it&rsquo;s virtual DOM is <a href="http://vdom-benchmark.github.io/vdom-benchmark/">one of the slowest ones</a> across the block.</p>

<h2>Immutability</h2>

<p>Noticed all that <code>deepcopy()</code> calls lying around, this looks like a waste (it really is cheap, but bear with me). The idea of immutable data-structures is instead of copying everything to save older states we build new state based on previous one without changing it.</p>

<p>Maybe it is still not clear enough, so I show you. That&rsquo;s how we make immutable object in JS:</p>

<p>```js
var object = {</p>

<pre><code>a: {x: 1, y: 2},
b: {text: 'hi'}
</code></pre>

<p>}</p>

<p>// Now instead of object.a.y = 3 we do
var object2 = {</p>

<pre><code>a: {x: object.a.x, y: 3},
b: object.b
</code></pre>

<p>}
```</p>

<p>Look how we reuse <code>object.a.x</code> and <code>object.b</code>. This not only saves us from copying, but effectively makes diffs way faster: before diffing <code>object.b</code> and <code>object2.b</code> we just check if they are the same object, which is referential equality, and done &mdash; diff is empty, no need to go all the way down.</p>

<p>One thing to add is this naive approach to immutable collections is not only cumbersome, but also ineffective. Suppose you have an object with lots of keys and a value of one of them changes,
you now need to create a new object with all the same keys (you can still reuse values). You probably don&rsquo;t use such objects, but what about array? Let&rsquo;s see how that looks like:</p>

<p><code>js
var prev = ['a', 'b', 'c', ..., 'z'];
var next = prev.slice(0, n-1).concat([newValue]).concat(prev.slice(n));
</code></p>

<p>So we need to copy the whole thing. Here is a better way to implement immutable sequences:</p>

<p>```js
var prev = {</p>

<pre><code>'0-3': {
    '0-1': {0: 'a', 1: 'b'},
    '2-3': {...},
},
'4-7': {...}
</code></pre>

<p>}
var next = {</p>

<pre><code>'0-3': {
    '0-1': prev['0-3']['0-1'],
    '2-3': {
        2: 'hey',
        3: prev['0-3']['2-3'][3]
    }
},
'4-7': prev['4-7']
</code></pre>

<p>}
```</p>

<p>We can see that we only create <code>log N</code> new objects here and the rest is reused, so even less copying and faster diffs. You also don&rsquo;t need to really deal with all this trees. There are great ready to use implementations out there. E.g. this is how our first example looks with a help of
<a href="https://github.com/facebook/immutable-js">Immutable.js</a>:</p>

<p>```js
var object = Immutable.fromJS({</p>

<pre><code>a: {x: 1, y: 2},
b: {text: 'hi'}
</code></pre>

<p>})</p>

<p>var object2 = object.setIn([&lsquo;a&rsquo;, &lsquo;y&rsquo;], 3); // object remains intact
```</p>

<p>It gives you nice API, efficiency and protection against accidentally writing to supposed to be immutable collection. Also take a look at <a href="https://github.com/swannodette/mori">mori</a> &mdash; a set of immutable collections extracted from ClojureScript.</p>

<p>Note that React actually uses naive immutable by convention collections.</p>

<h2>Wrap-up</h2>

<p>It may look from my notes that React is not a good tool, but it is actually very useful one.
It may not have magical powers and top speed, but it got components and is still pretty fast. It also offers ecosystem and community.</p>

<p>And there is one more way to look at it. React made a significant push to front-end development in an interesting direction, including all those virtual DOMs and immutable collection libraries.</p>

<p>Anyway, now that you know all this, you can judge better on what to use and how to structure your code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Every Language Needs Its Underscore]]></title>
    <link href="http://hackflow.com/blog/2014/06/22/why-every-language-needs-its-underscore/"/>
    <updated>2014-06-22T19:39:00+08:00</updated>
    <id>http://hackflow.com/blog/2014/06/22/why-every-language-needs-its-underscore</id>
    <content type="html"><![CDATA[<p><em>(This is an adaptation of a talk I gave at PyCon and DevDay. <a href="http://www.slideshare.net/hackflow/why-underscore">Slides</a> and <a href="http://www.youtube.com/watch?v=lGAC6ftYUS0#t=12100">video</a> are available in russian)</em></p>

<p>Do you know what <a href="http://underscorejs.org/">underscore</a> is? In its most general it&rsquo;s a JavaScript library that makes life better. For whoever writes in JavaScript. I mostly write Python and I also wanted my life better, so I went ahead and wrote <a href="https://github.com/Suor/funcy">a similar library for Python</a>. But the thing is you need to understand a magic behind something to properly replicate it. So what&rsquo;s the magic behind _?</p>

<!--more-->


<h2>The problem</h2>

<p>To answer this question we should look at problems this kind of libraries solve. To get some ground I&rsquo;ll illustrate them with code. That will be in python, but all the ideas are universal, so don&rsquo;t be afraid.</p>

<h3>A piece of entangled code</h3>

<p>This messy piece of code was taken from a real project and slightly simplified:</p>

<div class="example-bad">
``` python
images = []
for url in urls:
    for attempt in range(DOWNLOAD_TRIES):
        try:
            images.append(download_image(url))
            break
        except HttpError:
            if attempt + 1 == DOWNLOAD_TRIES:
                raise
```
</div>


<p>There are several things entangled in here, but my point is that this could be written much shorter:</p>

<div class="example-good">
``` python
http_retry = retry(DOWNLOAD_TRIES, HttpError)
images = map(http_retry(download_image), urls)
```
</div>


<p>If it seems hard at first, then it&rsquo;s okay. It involves some functions and <a href="http://hackflow.com/blog/2013/10/08/abstracting-control-flow/">control flow abstractions</a> most probably new to you. Once you get used to it you&rsquo;ll find that the latter variant is not only shorter, but is also simpler.</p>

<h3>Dirty dictionary</h3>

<p>But let&rsquo;s go on and clean some dirty dictionary:</p>

<div class="example-bad">
``` python
d = {}
for k, v in request.items():
    try:
        d[k] = int(v)
    except (TypeError, ValueError):
        d[k] = None
```
</div>


<p>Here we go through dictionary and clean its values by coercing them to <code>int</code>. Or to <code>None</code> if that is impossible. Cleaning input and ignoring malformed data is quite frequent task and yet it takes so much effort. This is the way I want to write that:</p>

<div class="example-good">
``` python
walk_values(silent(int), request)
```
</div>


<p>And it&rsquo;s entirely possible with <a href="https://github.com/Suor/funcy">funcy</a>. But let&rsquo;s move to the next one.</p>

<h3>Pairwise iteration</h3>

<p>This code checks if a sequence is ascending:</p>

<div class="example-bad">
``` python
prev = None
for x in seq:
    if prev is not None and x <= prev:
        is_ascending = False
        break
    prev = x
else:
    is_ascending = True
```
</div>


<p>Ah, iterating over a sequence and keeping track of a previous element. How many times had you done that? There should be a function to abstract it:</p>

<div class="example-good">
``` python
is_ascending = all(l < r for l, r in pairwise(seq))
```
</div>


<p>And <a href="http://funcy.readthedocs.org/en/latest/seqs.html#pairwise">pairwise</a> does exactly that. It enables us to iterate by sequence adjacent pairs. So we just need to check that all of them are ordered accordingly.</p>

<h3>&hellip;</h3>

<p>All these examples have one common property &mdash; red variants have more code. And more code:</p>

<ul>
<li>takes longer to write,</li>
<li>takes longer to read,</li>
<li>takes longer to debug,</li>
<li>contains more bugs.</li>
</ul>


<p>Obviously, underscore, funcy and friends help us write less code (at least in these three examples). But how do they do that?</p>

<h2>Extracting abstractions</h2>

<p>Let&rsquo;s take another look at the first example. It does three things in a single blob of code:</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code><span class='green'>images</span> <span class='blue'>= []
</span><span class='blue'>for url in</span> <span class='green'>urls</span><span class='blue'>:
</span><span class='red'>    for attempt in range(DOWNLOAD_TRIES):
</span><span class='red'>        try:
</span><span class='green'>            images</span><span class='blue'>.append(</span><span class='green'>download_image(</span><span class='blue'>url</span><span class='green'>)</span><span class='blue'>)
</span><span class='red'>            break
</span><span class='red'>        except HttpError:
</span><span class='red'>            if attempt + 1 == DOWNLOAD_TRIES:
</span><span class='red'>                <span class="k">raise
</span></code></pre></td></tr></table></div></figure></p>

<p>I highlighted every aspect of this code with separate color:</p>

<ul>
<li>image download (green),</li>
<li>retries on fails (red),</li>
<li>iteration through urls and result collection (blue).</li>
</ul>


<p>As you can see, three colors are interleaved here. This hints that corresponding aspects are entangled. And by &ldquo;entangled&rdquo; I mean they can not be reused separately. Say we need retries on fails in some other place, we will probably end up copying the whole block and updating it somewhat. Not exactly the best practice &ldquo;code reuse&rdquo;.</p>

<p>If, on the other hand, we managed to separate reties then our code will look like:</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code><span class='red'>def retry(&hellip;):</p>

<pre><code>...
</code></pre>

<p>http_retry = retry(DOWNLOAD_TRIES, HttpError)
</span><span class='green'>images</span> <span class='blue'>= []
</span><span class='blue'>for url in</span> <span class='green'>urls</span><span class='blue'>:
</span><span class='green'>    images</span><span class='blue'>.append(</span><span class='red'>http_retry(</span><span class='green'>download_image</span><span class='red'>)</span><span class='blue'>(url))
</span></code></pre></td></tr></table></div></figure></p>

<p>Now red code is nicely grouped at the top. Green and blue are still mixed, but now they represent a pattern so common that most modern languages have a builtin function to handle that:</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code><span class='red'>def retry(&hellip;):</p>

<pre><code>...
</code></pre>

<p>http_retry = retry(DOWNLOAD_TRIES, HttpError)
</span><span class='green'>images</span> <span class='blue'>= map(<span class='red'>http_retry(</span><span class='green'>download_image</span><span class='red'>)</span><span class='blue'>, <span class='green'>urls</span><span class='blue'>)
</span></code></pre></td></tr></table></div></figure></p>

<p>This last variant has some lovely traits: each part of a task at hand (downloading images) appear only once, the whole iteration aspect is handled with a single <code>map()</code> call and retries are abstracted out into <a href="http://funcy.readthedocs.org/en/latest/flow.html#retry">the retry function</a>.</p>

<p>Extracting common behavior into a higher order functions is a first trick underscore and funcy use to make your life better.</p>

<h2>Hiding low level</h2>

<p>It&rsquo;s time to go back to second example. I&rsquo;ll throw away error handling to make snippets more even:</p>

<p>``` python</p>

<h1>Using function</h1>

<p>walk_values(int, request)</p>

<h1>Using dict comprehension</h1>

<p>{k: int(v) for k, v in request.items()}
```</p>

<p>Now they are both one-liners, so how is first one better? Let&rsquo;s identify every single distinct component of each code variant:</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># 3 components</span>
</span><span class='trend3'>walk_values(</span><span class='trend4'>int</span><span class='trend3'>,</span> <span class='trend8'>request</span><span class='trend3'>)
</span><span class='line'>
</span><span class='line'><span class="c"># 8 or so components</span>
</span><span class='line'><span class='trend3'>{</span><span class='trend0'>k</span><span class='trend3'>:</span> <span class='trend4'>int(</span><span class='trend6'>v</span><span class='trend4'>)</span> <span class='trend9'>for</span> <span class='trend0'>k</span><span class='trend7'>,</span> <span class='trend6'>v</span> <span class='trend9'>in</span> <span class='trend8'>request</span><span class='trend5'>.items()</span><span class='trend3'>}
</span></code></pre></td></tr></table></div></figure></p>

<p>The second one looks like rainbow. But besides looking nice this means each time you write or read it you need to load all those components into your head, taking up all your cognitive resources. This is how first line is better.</p>

<p>That could be highlighted in even more obvious manner:</p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='trend3'>walk_values(int, request)
</span><span class='line'>
</span><span class='line'><span class="c"># red are low-level details</span>
</span><span class='line'><span class='trend3'>{</span><span class='trend8'>k</span><span class='trend3'>: int(</span><span class='trend8'>v</span><span class='trend3'>)</span> <span class='trend8'>for k, v in</span> <span class='trend3'>request</span><span class='trend8'>.items()</span><span class='trend3'>}
</span></code></pre></td></tr></table></div></figure></p>

<p>This way we can see that about a half of the second line is low-level details. And low-level mean you don&rsquo;t need to know all those details to understand what&rsquo;s going on.</p>

<p>Hiding low-level details is the second way such libraries make your life better.</p>

<h2>Enriching our language</h2>

<p>I&rsquo;ll translate the last example into natural language:</p>

<p>``` python
prev = None
for x in seq:</p>

<pre><code>if prev is not None and x &lt;= prev:
    is_ascending = False
    break
prev = x
</code></pre>

<p>else:</p>

<pre><code>is_ascending = True
</code></pre>

<h1>Starting with empty prev, iterate over seq, bookkeeping prev actuality,</h1>

<h1>on each cycle if prev is present and current element is less or equal than it</h1>

<h1>then set is_ascending to False and break.</h1>

<h1>If loop wasn&rsquo;t broken set is_ascending to True</h1>

<p>is_ascending = all(l &lt; r for l, r in pairwise(seq))</p>

<h1>set is_ascending to all left elements being smaller than right</h1>

<h1>in adjacent pairs of seq</h1>

<p>```</p>

<p>Obviously, more code emits more text. Higher level code generates an explanation utilizing higher level abstractions. This way we can use bigger building blocks not only in coding, but in problem solving.</p>

<p>And this is the third way _ makes your life better.</p>

<h2>Wrap-up</h2>

<p>All the things we came through are completely language independent. So there gotta be underscore for every language? Not quite, and more importantly a straight-forward port is not always a great idea: common behaviors to abstract vary per language and especially per application. The right approach would be to follow core ideas. Or look around if someone have already done that.</p>

<p>Here are some leads for you to take:</p>

<table>
<thead>
<tr>
<th>Language    </th>
<th> Libraries</th>
</tr>
</thead>
<tbody>
<tr>
<td>JavaScript  </td>
<td> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype">Array</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype">Function</a>, <a href="http://underscorejs.org/">Underscore</a>, <a href="http://lodash.com/">lowdash</a></td>
</tr>
<tr>
<td>Python      </td>
<td> <a href="https://docs.python.org/2/library/itertools.html">itertools</a>, <a href="https://docs.python.org/2/library/functools.html">functools</a>, <a href="https://github.com/Suor/funcy">funcy</a>, <a href="https://github.com/pytoolz/toolz">toolz</a>, <a href="https://github.com/kachayev/fn.py">fn.py</a></td>
</tr>
<tr>
<td>Ruby        </td>
<td> <a href="http://www.ruby-doc.org/core/Enumerable.html">Enumerable</a>, <a href="http://guides.rubyonrails.org/active_support_core_extensions.html">ActiveSupport</a></td>
</tr>
<tr>
<td>PHP         </td>
<td> <a href="https://github.com/lstrojny/functional-php">functional-php</a>, <a href="https://github.com/brianhaveri/Underscore.php">Underscore.php</a></td>
</tr>
<tr>
<td>Clojure     </td>
<td> <a href="http://richhickey.github.io/clojure/clojure.core-api.html">clojure.core</a></td>
</tr>
<tr>
<td>Java        </td>
<td> <a href="http://functionaljava.org/">FunctionalJava</a></td>
</tr>
<tr>
<td>C#          </td>
<td> <a href="http://msdn.microsoft.com/ru-ru/library/bb397926.aspx">LINQ</a></td>
</tr>
<tr>
<td>Objective-C </td>
<td> <a href="http://underscorem.org/">Underscore.m</a></td>
</tr>
</tbody>
</table>


<p><strong>P.S.</strong> You may also want to look at <a href="http://www.scala-lang.org/">Scala</a> if you are using JVM and at <a href="http://www.tryfsharp.org/">F#</a> if it&rsquo;s .NET.</p>

<p><strong>P.P.S.</strong> Please stop commenting on Hacker News, a controversial penalty is killing this post. Use <a href="http://www.reddit.com/r/programming/comments/28se2h/why_every_language_needs_its_underscore/">reddit thread</a> instead. Sadly, HN is not a place for discussions anymore.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Python Made Easy]]></title>
    <link href="http://hackflow.com/blog/2013/10/13/functional-python-made-easy/"/>
    <updated>2013-10-13T19:22:00+08:00</updated>
    <id>http://hackflow.com/blog/2013/10/13/functional-python-made-easy</id>
    <content type="html"><![CDATA[<p>There are a lot of buzz about Haskell, Lisp, Erlang and other languages few people code in. But while they play their role as banners, functional programming sneaks into our code in multi-paradigm languages.</p>

<p>I was going to continue this way and later introduce my library of a variety of functional tricks, but suddenly realized it&rsquo;s not about FP, it&rsquo;s about utility. And that&rsquo;s what I will focus on below trying to show you real-life value of <a href="https://github.com/Suor/funcy">funcy</a>.</p>

<!--more-->


<p>Funcy started from a try to bunch up a couple of data manipulation utils. Therefore most of my examples will be about that. Some of them may seem trivial to you, but there are many gains these tiny tools can offer you both in terms of code brevity and expressiveness. Or they&rsquo;ll just save your time, still good.</p>

<p>I&rsquo;ll go through the typical tasks any python programmer face during her day.</p>

<h2>Everyday data manipulation</h2>

<p><em>1. Flatten list of lists. That&rsquo;s how you usually do it:</em></p>

<p>``` python
from operator import concat
reduce(concat, list_of_lists)</p>

<h1>or that:</h1>

<p>sum(list_of_lists, [])</p>

<h1>or that:</h1>

<p>from itertools import chain
list(chain.from_iterable(list_of_lists))
```</p>

<p>They all work and all have their flaws: require imports, additional calls or restrict what you can pass into. But the main flaw is that they are all patterns not obvious calls. There should be a simple function to do such a simple and common thing and there is one in funcy:</p>

<p><code>python
from funcy import cat
cat(list_of_lists)
</code></p>

<p><code>cat</code> joins list of lists, tuples, iterators and generally any iterables into single list. And it comes with extra shortcut if you want to <code>cat</code> results of <code>map</code> call. For example, this</p>

<p><code>python
from funcy import mapcat
mapcat(str.splitlines, bunch_of_texts)
</code></p>

<p>will result in flat list of all lines of all the texts. There are lazy versions of both functions: <code>icat</code> and <code>imapcat</code>.</p>

<p><em>2. Merge some dicts. There are several clumsy ways in python:</em></p>

<p>``` python
d1.update(d2)  # Changes d1
dict(d1, **d2) # Really awkward for more than 2 dicts</p>

<p>d = d1.copy()
d.update(d2)
```</p>

<p>I always wondered why one can&rsquo;t just add them up, but that&rsquo;s what we have. Anyway, this is also easy in funcy:</p>

<p><code>python
from funcy import merge, join
merge(d1, d2)
merge(d1, d2, d3)
join(sequence_of_dicts)
</code></p>

<p>The best part here is these are omnivorous. They work with anything: sets, dicts, ordered dicts, lists, tuples, iterators, even strings, carefully preserving collection type.</p>

<p><em>3. Capturing something with regular expression. A usual way:</em></p>

<p>``` python
m = re.search(some_re, s)
if m:</p>

<pre><code>actual_match = m.group() # or m.group(i) or m.groups()
...
</code></pre>

<p>```</p>

<p>Much more straightforward with funcy:</p>

<p><code>python
from funcy import re_find
actual_match = re_find(some_re, s)
</code></p>

<p>Still not impressed? Then look here:</p>

<p>``` python
from funcy import re_finder, re_all, partial, mapcat</p>

<h1>Get a number out of every word</h1>

<p>map(re_finder(&lsquo;\d+&rsquo;), words)</p>

<h1>Parse simple ini file into dict</h1>

<h1>(re_finder returns tuples when there is more that one capture in regexp)</h1>

<p>dict(imap(re_finder(&lsquo;(\w+)=(\w+)&rsquo;), ini.splitlines()))</p>

<h1>Find all numbers in all the strings and return as flat list</h1>

<p>mapcat(partial(re_all, r'\d+&lsquo;), bunch_of_strings)
```</p>

<h2>About imports and practicality</h2>

<p>As you can see I import everything directly from funcy, not using any sub-packages. The reason it&rsquo;s designed this way is practicality. That would be too annoying to remember where each one tiny thing comes from. There are enough libraries to clutter your file heads anyway.</p>

<p>This also enables you to write:</p>

<p><code>python
from funcy import *
</code></p>

<p>And start enjoying all functional python niceness right away. Ok, now when you know where all the stuff is kept I won&rsquo;t repeat imports in every new example.</p>

<h2>A bit more functional things</h2>

<p>We&rsquo;ve seen a pair of examples of higher order functions earlier, particularly <code>re_finder</code> and <code>partial</code>. One thing to note is that <code>re_finder</code> itself is a partial application of <code>re_find</code> meant to be used with <code>map</code> and friends. Naturally, there is a similar utility to be used with <code>filter</code>:</p>

<p>``` python</p>

<h1>Choose all private attributes of an object</h1>

<p>is_private = re_tester(&lsquo;^_&rsquo;)
filter(is_private, dir(some_obj))
```</p>

<p>We can create a bunch of predicates and filter with them:</p>

<p><code>python
is_special = re_tester('^__.+__$')
is_const = re_tester('^[A-Z_]+$')
filter(...)
</code></p>

<p>But what if we want to apply several of them at once or use some predicate logic. That&rsquo;s easy:</p>

<p><code>python
is_public = complement(is_private)
is_private_const = all_fn(is_private, is_const)
either_const_or_public = any_fn(is_const, is_public)
</code></p>

<p>Or you can use convenience function complementary to <code>filter</code>:</p>

<p><code>python
remove(is_private, ...) # same as filter(is_public)
</code></p>

<p>I hope everyone have their functional appetite satisfied so we can switch to something less abstract.</p>

<h2>Collections</h2>

<p>Aside from <a href="http://funcy.readthedocs.org/en/latest/seqs.html">sequence utilities</a>, funcy provides lots of ones to work with collections.
And the two fundamental are <code>walk</code> and <code>select</code>, a versions of <code>map</code> and <code>filter</code> preserving collection type:</p>

<p>``` python
walk(inc, {1, 2, 3}) # &ndash;> {2, 3, 4}
walk(inc, (1, 2, 3)) # &ndash;> (2, 3, 4)</p>

<h1>Mapping function receives pairs when walking dicts</h1>

<p>swap = lambda (k, v): (v, k)
walk(swap, {1: 10, 2: 20})</p>

<h1>&ndash;> {10: 1, 20: 2}</h1>

<p>select(even, {1, 2, 3, 10, 20})</p>

<h1>&ndash;> {2, 10, 20}</h1>

<p>select(lambda (k, v): k == v, {1: 1, 2: 3})</p>

<h1>&ndash;> {1: 1}</h1>

<p>```</p>

<p>This pair of functions is backed up with a set of ones to work with dicts: <code>walk_keys</code>, <code>walk_values</code>, <code>select_keys</code>, <code>select_values</code>:</p>

<p>``` python</p>

<h1>Get a dict of public attributes of an instance</h1>

<p>select_keys(is_public, instance.<strong>dict</strong>)</p>

<h1>Clean dict of falsy values</h1>

<p>select_values(bool, some_dict)
```</p>

<p>The last example in this section will include several new functions at once: <code>silent</code> &ndash; catches all exceptions in passed function, returning <code>None</code>; <code>compact</code> &ndash; removes falsy values from collection; <code>walk_values</code> &ndash; maps dict values with given function. Anyhow, this line constructs a dict of integer params from typical stringy request dict you get:</p>

<p><code>python
compact(walk_values(silent(int), request_dict))
</code></p>

<h2>Back to data manipulation</h2>

<p>Finally, the interesting part. I included some examples here just because they seem cool. Although, I did this earlier to be honest. Anyway, let&rsquo;s split and group:</p>

<p>``` python</p>

<h1>split absolute and relative urls</h1>

<p>absolute, relative = split(re_tester(r'^<a href="http://">http://</a>&lsquo;), urls)</p>

<h1>group posts by category</h1>

<p>group_by(lambda post: post.category, posts)
```</p>

<p>Partition and chunk:</p>

<p>``` python</p>

<h1>make a dict from flat list of pairs</h1>

<p>dict(partition(2, flat_list_of_pairs))</p>

<h1>make a structures from flat list</h1>

<p>{id: (name, password) for id, name, password in partition(3, users)}</p>

<h1>check versions are consecutive</h1>

<p>assert all(prev + 1 == next for prev, next in partition(2, 1, versions)):</p>

<h1>process data by chunks</h1>

<p>for chunk in chunks(CHUNK_SIZE, lots_of_data):</p>

<pre><code>process(chunk)
</code></pre>

<p>```</p>

<p>And a couple more, just for fun:</p>

<p>``` python</p>

<h1>add new line indents at the beginning of each paragraph</h1>

<p>for line, prev in with_prev(text.splitlines()):</p>

<pre><code>if not prev:
    print '    ',
print line
</code></pre>

<h1>select Shakespeare&rsquo;s play written in 1611</h1>

<p>where(plays, author=&ldquo;Shakespeare&rdquo;, year=1611)</p>

<h1>=> [{&ldquo;title&rdquo;: &ldquo;Cymbeline&rdquo;, &ldquo;author&rdquo;: &ldquo;Shakespeare&rdquo;, &ldquo;year&rdquo;: 1611},</h1>

<h1>{&ldquo;title&rdquo;: &ldquo;The Tempest&rdquo;, &ldquo;author&rdquo;: &ldquo;Shakespeare&rdquo;, &ldquo;year&rdquo;: 1611}]</h1>

<p>```</p>

<h2>More than just a library</h2>

<p>Maybe some of you recognized some functions from Clojure or Underscore.js (Shakespear example was shamelessly ripped of the docs of the latter, for example). That should not surprise you, in many respects I drew inspiration from these two sources. Nonetheless I followed python spirit and stayed practical as far as I could.</p>

<p>And one more thought. We used to call programming languages languages, still rarely think of keywords and functions as words. We define our own words by writing new functions, but they are usually too specific to make it into our everyday use. Funcy utilities are designed the other way around, to be broadly used as a layer over python and it&rsquo;s standard library.</p>

<p>So, how about <a href="https://github.com/Suor/funcy">extending your vocabulary</a>?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Abstracting Control Flow]]></title>
    <link href="http://hackflow.com/blog/2013/10/08/abstracting-control-flow/"/>
    <updated>2013-10-08T12:13:00+08:00</updated>
    <id>http://hackflow.com/blog/2013/10/08/abstracting-control-flow</id>
    <content type="html"><![CDATA[<p>Any programmer, even if she doesn&rsquo;t see it this way, constantly creates abstractions. The most common things we abstract are calculations (caught into functions) or behavior (procedures and classes), but there are other recurring patterns in our work, especially in error handling, resource management and optimizations.</p>

<p>Those recurring patterns usually involve rules like &ldquo;close everything you open&rdquo;, &ldquo;free resources then pass error farther&rdquo;, &ldquo;if that succeeded go on else &hellip;&rdquo;, which commonly look like repetitive <code>if ... else</code> or <code>try ... catch</code> code. How about abstracting all that control flow?</p>

<p> <!--more--></p>

<p>In conventional code, where nobody plays too smart, control structures do control flow. Sometimes they don&rsquo;t do that well and then we throw in our own. That is simple in Lisp, Ruby or Perl, but is also possible in a way in any language featuring higher order functions.</p>

<h2>Abstractions</h2>

<p>Let&rsquo;s start from the beginning. What do we do to build a new abstraction?</p>

<ol>
<li>Select a piece of functionality or behavior.</li>
<li>Name it.</li>
<li>Implement it.</li>
<li>Hide our implementation behind chosen name.</li>
</ol>


<p>Points 3-4 are not always possible. It depends very much on flexibility of your language and the piece you are trying to abstract.</p>

<p>In case your language can&rsquo;t handle it, skip implementation and just describe your technique, make it popular, giving birth to a new design pattern. This way you can continue writing repetitive code without feeling bad about it.</p>

<h2>Back to real-life</h2>

<p>This is a piece of common python code, taken from real-life project with minimal changes:</p>

<p>``` python
urls = &hellip;
photos = []</p>

<p>for url in urls:</p>

<pre><code>for attempt in range(DOWNLOAD_TRIES):
    try:
        photos.append(download_image(url))
        break
    except ImageTooSmall:
        pass # skip small images
    except (urllib2.URLError, httplib.BadStatusLine, socket.error), e:
        if attempt + 1 == DOWNLOAD_TRIES:
            raise
</code></pre>

<p>```</p>

<p>There are many aspects to this code: iterating over <code>urls</code>, downloading images, collecting images into <code>photos</code>, skipping small images and retries in case of download errors. All of them are entangled in this single piece of code, despite that they can be useful outside of this code snippet.</p>

<p>And some of them already exist separately. For example, iteration plus result gathering make <code>map</code>:</p>

<p><code>python
photos = map(download_image, urls)
</code></p>

<p>Let&rsquo;s try fishing out other aspects, starting with skipping small images. That could be done like:</p>

<p>``` python
@contextmanager
def ignore(error):</p>

<pre><code>try:
    yield
except error:
    pass
</code></pre>

<p>photos = []
for url in urls:</p>

<pre><code>with ignore(ImageTooSmall):
    photos.append(download_image(url))
</code></pre>

<p>```</p>

<p>Looks good. However this can&rsquo;t be composed with <code>map</code> easily. But let&rsquo;s put it off for now and deal with network errors. We can try abstracting it the same way we handled <code>ignore</code>:</p>

<p>``` python
with retry(DOWNLOAD_TRIES, (urllib2.URLError, httplib.BadStatusLine, socket.error)):</p>

<pre><code># ... do stuff
</code></pre>

<p>```</p>

<p>Only that can&rsquo;t be implemented. Python <code>with</code> statement can&rsquo;t run its block more than once. We just ran against language constraint. It&rsquo;s important to notice such cases if you want to understand languages differences beyond syntax. In Ruby and to lesser extend in Perl we could continue manipulating blocks, in Lisp we could even manipulate code (that would probably be an overkill), but not all is lost for Python, we should just switch to higher order functions and their convenience concept &ndash; decorators:</p>

<p>``` python
@decorator
def retry(call, tries, errors=Exception):</p>

<pre><code>for attempt in range(tries):
    try:
        return call()
    except errors:
        if attempt + 1 == tries:
            raise
</code></pre>

<p>http_retry = retry(DOWNLOAD_TRIES, (urllib2.URLError, httplib.BadStatusLine, socket.error))
photos = map(http_retry(download_image), urls)
```</p>

<p>As we can see, it even works with <code>map</code> naturally. And more than that, we got a pair of potentially reusable tools: <code>retry</code> and <code>http_retry</code>. Unfortunately our <code>ignore</code> context manager can&rsquo;t be easily added here. It&rsquo;s not composable. Let&rsquo;s just rewrite it as decorator:</p>

<p>``` python
@decorator
def ignore(call, errors=Exception):</p>

<pre><code>try:
    return call()
except errors:
    return None
</code></pre>

<p>ignore_small = ignore(ImageTooSmall)
http_retry = retry(DOWNLOAD_TRIES, (urllib2.URLError, httplib.BadStatusLine, socket.error))
download = http_retry(ignore_small(download_image))
photos = filter(None, map(download, urls))
```</p>

<h2>How is this better?</h2>

<p>Seems like we have more code now and it still involves all the same aspects. The difference is that they are not entangled anymore they are composed. Which means several things:</p>

<ul>
<li>every single aspect is visible,</li>
<li>it&rsquo;s named,</li>
<li>it can be taken out and brought back easily,</li>
<li>it can be reused.</li>
</ul>


<p>The essential code takes only 4 last lines and after getting used to functional control flow can probably become more readable. Or not, that&rsquo;s subjective. Still I hope this post will help somebody to write better code.</p>

<p><strong>P.S.</strong> I packed <code>@decorator</code>, <code>ignore</code> and <code>retry</code> into <a href="https://github.com/Suor/funcy">one practical library</a>.</p>

<p><strong>P.P.S.</strong> Other examples of control flow abstractions include: <a href="http://underscorejs.org/#functions">function manipulations in underscore.js</a>, list comprehensions and generator expressions, <a href="https://github.com/Suor/patterns">pattern matching</a>, <a href="https://github.com/Suor/overload">function overload</a>, caching decorators and much more.</p>
]]></content>
  </entry>
  
</feed>
