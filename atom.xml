<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hackflow]]></title>
  <link href="http://hackflow.com/atom.xml" rel="self"/>
  <link href="http://hackflow.com/"/>
  <updated>2015-03-08T21:12:01+07:00</updated>
  <id>http://hackflow.com/</id>
  <author>
    <name><![CDATA[Alexander Schepanovski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Boiling React Down to Few Lines in jQuery]]></title>
    <link href="http://hackflow.com/blog/2015/03/08/boiling-react-down-to-few-lines-in-jquery/"/>
    <updated>2015-03-08T20:08:00+07:00</updated>
    <id>http://hackflow.com/blog/2015/03/08/boiling-react-down-to-few-lines-in-jquery</id>
    <content type="html"><![CDATA[<p>You probably heard something like how React is awesome &lsquo;cause it makes UI a pure function of application state? But even before you started to get that it was complemented with something like how that works on top of immutability and virtual DOM? And then you get free save, load, undo and something insane called time-travel debugging on top of that. Guess what? None of these are necessary to use core React idea and reap its benefits. And I&rsquo;ll show that in a few lines in jQuery.</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">&quot;colored-counter&quot;</span><span class="nt">&gt;</span>0<span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;color&quot;</span><span class="nt">&gt;&lt;/input&gt;</span>
</span><span class='line'><span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">&quot;inc&quot;</span><span class="nt">&gt;&lt;/button&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#color&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;keyup&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#colored-counter&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;color&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#inc&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">oldValue</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#colored-counter&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">newValue</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">old</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#colored-counter&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">newValue</span><span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Could be written as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">&quot;colored-counter&quot;</span><span class="nt">&gt;</span>0<span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;color&quot;</span><span class="nt">&gt;&lt;/input&gt;</span>
</span><span class='line'><span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">&quot;inc&quot;</span><span class="nt">&gt;&lt;/button&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">state</span> <span class="o">=</span> <span class="p">{</span><span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="mi">0</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">updateUI</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#colored-counter&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;color&#39;</span><span class="p">,</span> <span class="nx">state</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#colored-counter&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#color&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;keyup&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">state</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">updateUI</span><span class="p">();</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#inc&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">state</span><span class="p">.</span><span class="nx">value</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">updateUI</span><span class="p">();</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This demonstrates React idea in its simplest (and a bit bastardized way). We get to this later, now we should answer a reasonable question: how is this better?
Let me draw you a picture. This is how first variant works:</p>

<p><img src="http://hackflow.com/images/boiling-react-down/jquery-small.svg" style="width: 100%" /></p>

<p>And this is how second one does:</p>

<p><img src="http://hackflow.com/images/boiling-react-down/react-small.svg" style="width: 100%" /></p>

<p>Doesn&rsquo;t look that much better, but let us think scale. Over time our UI will get more events and elements, some events will update more than one element, some elements will be updated by more than one event. So we will get this:</p>

<p><img src="http://hackflow.com/images/boiling-react-down/jquery-big.svg" style="width: 100%" /></p>

<p>And even with our bastardized React-like code we get:</p>

<p><img src="http://hackflow.com/images/boiling-react-down/react-big.svg" style="width: 100%" /></p>

<p>In first picture we have <code>N</code> events, <code>M</code> elements and up to <code>O(N*M)</code> links.
In second one we have just <code>N</code> event links and <code>M</code> element links.
Overall we got from potential <code>O(N*M)</code> complexity down to <code>O(N+M)</code>, not bad for a simple trick.</p>

<p>Now it looks like we got something. But what about all those magical powers?
Ah, we almost got them too.</p>

<h2>Magical Powers</h2>

<p>Basically all magical powers mentioned come from an ability to write:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// save</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">cannedState</span> <span class="o">=</span> <span class="nx">deepcopy</span><span class="p">(</span><span class="nx">state</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// load</span>
</span><span class='line'><span class="nx">state</span> <span class="o">=</span> <span class="nx">cannedState</span><span class="p">;</span>
</span><span class='line'><span class="nx">updateUI</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is facilitated by 2 facts:</p>

<ul>
<li>we have a single explicit state,</li>
<li>we can update UI to comply to arbitrary state.</li>
</ul>


<p>That&rsquo;s it. We can write serialized canned state to local storage, send it to server, manage a history of canned states. And this will give us page reload protection, persistence and undo/time-travel respectively.</p>

<p>Confused? Let&rsquo;s write some code. That&rsquo;s how we protect from accidental page reload:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">updateUI</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Save latest state to local storage</span>
</span><span class='line'>    <span class="nx">LocalStorage</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;state&#39;</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">state</span><span class="p">));</span>
</span><span class='line'>    <span class="c1">// ... continue as usual</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Load saved state from local storage on page load</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">state</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">LocalStorage</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;state&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="nx">updateUI</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s how we get time-travel debugging:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">&quot;time-pos&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">&quot;back&quot;</span><span class="nt">&gt;</span>Back<span class="nt">&lt;/button&gt;</span>
</span><span class='line'><span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">&quot;next&quot;</span><span class="nt">&gt;</span>Next<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">time</span> <span class="o">=</span> <span class="p">{</span><span class="nx">history</span><span class="o">:</span> <span class="p">[],</span> <span class="nx">pos</span><span class="o">:</span> <span class="mi">0</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">updateTimeUI</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#time-pos&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;Position &#39;</span> <span class="o">+</span> <span class="nx">time</span><span class="p">.</span><span class="nx">pos</span> <span class="o">+</span> <span class="s1">&#39; of &#39;</span> <span class="o">+</span> <span class="nx">time</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">saveState</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">time</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">deepcopy</span><span class="p">(</span><span class="nx">state</span><span class="p">));</span>
</span><span class='line'>    <span class="nx">time</span><span class="p">.</span><span class="nx">pos</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">updateTimeUI</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#back&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Move history pointer</span>
</span><span class='line'>    <span class="nx">time</span><span class="p">.</span><span class="nx">pos</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">updateTimeUI</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">// Load historic state</span>
</span><span class='line'>    <span class="nx">state</span> <span class="o">=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">history</span><span class="p">[</span><span class="nx">time</span><span class="p">.</span><span class="nx">pos</span><span class="p">];</span>
</span><span class='line'>    <span class="nx">updateUI</span><span class="p">();</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#next&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">time</span><span class="p">.</span><span class="nx">pos</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// ... same</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">updateUI</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Save state to history on every change</span>
</span><span class='line'>    <span class="nx">saveState</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">// ... continue as usual</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>On each change of state we push its deep copy to history list and later we can restore that state by simply copying it from history and updating UI to fit it.</p>

<p>Note also how we use the same pattern here? <code>time</code> is the state of time-travel sub-application
and <code>updateTimeUI()</code> is its update function.</p>

<p>Now we can build from that. Undo is just time-travel for user not developer, by saving history to local storage we can preserve it on page reload, by catching errors and sending them along with serialized history to our bug tracker we can automatically reproduce errors our users face.</p>

<p>I should note that React doesn&rsquo;t have all these magical powers, at least out of the box, since it separates app state into pieces and hide it in components.</p>

<h2>Pure Function</h2>

<p>Why do we need pure functions, immutable data and virtual DOM? These are optimizations and to some extent simplifications, not core to idea. Still let&rsquo;s us follow the way that led to them.</p>

<p>First we need a slightly more intricate example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">&quot;count&quot;</span><span class="nt">&gt;</span>2<span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>hi<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li&gt;</span>there<span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">&quot;add&quot;</span><span class="nt">&gt;&lt;/button&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">state</span> <span class="o">=</span> <span class="p">{</span><span class="nx">items</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;hi&#39;</span><span class="p">,</span> <span class="s1">&#39;there&#39;</span><span class="p">]}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">updateUI</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#count&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// Compare ul.childNodes to state.items and make updates</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;ul li&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">state</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">updateUI</span><span class="p">();</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#add&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">state</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">getNextString</span><span class="p">());</span>
</span><span class='line'>    <span class="nx">updateUI</span><span class="p">();</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Several things to see here:</p>

<ul>
<li>there is a duplication between prerendered html and initial state,</li>
<li>update became complex &lsquo;cause we need to compare data structure to DOM.</li>
</ul>


<p>There is a simpler way to do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;ui&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">render</span><span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">span</span> <span class="o">=</span> <span class="s1">&#39;&lt;span id=&quot;count&quot;&gt;&#39;</span> <span class="o">+</span> <span class="nx">state</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">length</span> <span class="o">+</span> <span class="s1">&#39;&lt;/span&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">lis</span> <span class="o">=</span> <span class="nx">state</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s1">&#39;&lt;li&gt;&#39;</span> <span class="o">+</span> <span class="nx">item</span> <span class="o">+</span> <span class="s1">&#39;&lt;/li&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">span</span> <span class="o">+</span> <span class="s1">&#39;&lt;ul&gt;&#39;</span> <span class="o">+</span> <span class="nx">lis</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;&lt;/ul&gt;&#39;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">updateUI</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#ui&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">render</span><span class="p">(</span><span class="nx">state</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here <code>render()</code> is just pure function from app state to html. And we want it to be pure so that
state will be the single thing defining UI.</p>

<p>In a way UI was a function of state even in our bastardized code, it just wasn&rsquo;t clearly obvious
&lsquo;cause we updated UI, not calculated and rebuilt it from scratch each time. There also was a possibility to screw up and write <code>updateUI()</code> so that UI state is defined both by its own previous state and application state, thus using render is not really an optimization, but a simplification and a guard.</p>

<p>But anyway that&rsquo;s it on pure functions.</p>

<h2>Virtual DOM</h2>

<p>Now look at those <code>render()</code> / <code>$().html()</code> pair, they build entire representation from scratch on each event, probably on every key press. This sounds slow, so we use another optimization &mdash; virtual DOM:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">root</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;ui&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">prevState</span> <span class="o">=</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">prevTree</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">render</span><span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Virtual DOM is really just a tree of JavaScript objects or arrays</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">[</span><span class="s1">&#39;span&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;count&#39;</span><span class="p">},</span> <span class="nx">state</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">length</span><span class="p">],</span>
</span><span class='line'>        <span class="p">[</span><span class="s1">&#39;ul&#39;</span><span class="p">,</span> <span class="p">{},</span> <span class="nx">state</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span>  <span class="p">[</span><span class="s1">&#39;li&#39;</span><span class="p">,</span> <span class="p">{},</span> <span class="nx">item</span><span class="p">]</span>
</span><span class='line'>        <span class="p">})]</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">updateUI</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">vTree</span> <span class="o">=</span> <span class="nx">render</span><span class="p">(</span><span class="nx">state</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">diff</span> <span class="o">=</span> <span class="nx">vDiff</span><span class="p">(</span><span class="nx">prevTree</span><span class="p">,</span> <span class="nx">vTree</span><span class="p">);</span> <span class="c1">// Just a diff on data structures, haha :)</span>
</span><span class='line'>    <span class="nx">vApply</span><span class="p">(</span><span class="nx">root</span><span class="p">,</span> <span class="nx">diff</span><span class="p">)</span>                 <span class="c1">// Apply series of patches to real DOM</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">prevState</span> <span class="o">=</span> <span class="nx">deepcopy</span><span class="p">(</span><span class="nx">state</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">prevTree</span> <span class="o">=</span> <span class="nx">vTree</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If any of this diffing/patching sounds complicated to you then you shouldn&rsquo;t worry React or <a href="https://github.com/Matt-Esch/virtual-dom">standalone virtual DOM implementation</a> got you covered. But that&rsquo;s really not that complicated. If you know how to write diffing algorithm then you can surely implement this yourself.</p>

<p>Note that what we just did is a premature optimization. Current simple example will do just fine
with naive render-to-string implementation above. Surprisingly, most of SPAs out there will do just
fine as well, browsers are hell fast these days. I want to stress this once more &ndash; for an average app you can skip React or other virtual DOM at start and only go for it once it gets too slow (or never).</p>

<p>Another stone in Reacts direction: it&rsquo;s virtual DOM is <a href="http://vdom-benchmark.github.io/vdom-benchmark/">one of the slowest ones</a> across the block.</p>

<h2>Immutability</h2>

<p>Noticed all that <code>deepcopy()</code> calls lying around, this looks like a waste (it really is cheap, but bear with me). The idea of immutable data-structures is instead of copying everything to save older states we build new state based on previous one without changing it.</p>

<p>Maybe it is still not clear enough, so I show you. That&rsquo;s how we make immutable object in JS:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">object</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">a</span><span class="o">:</span> <span class="p">{</span><span class="nx">x</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">2</span><span class="p">},</span>
</span><span class='line'>    <span class="nx">b</span><span class="o">:</span> <span class="p">{</span><span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;hi&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Now instead of object.a.y = 3 we do</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">object2</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">a</span><span class="o">:</span> <span class="p">{</span><span class="nx">x</span><span class="o">:</span> <span class="nx">object</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">3</span><span class="p">},</span>
</span><span class='line'>    <span class="nx">b</span><span class="o">:</span> <span class="nx">object</span><span class="p">.</span><span class="nx">b</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Look how we reuse <code>object.a.x</code> and <code>object.b</code>. This not only saves us from copying, but effectively makes diffs way faster: before diffing <code>object.b</code> and <code>object2.b</code> we just check if they are the same object, which is referential equality, and done &mdash; diff is empty, no need to go all the way down.</p>

<p>One thing to add is this naive approach to immutable collections is not only cumbersome, but also ineffective. Suppose you have an object with lots of keys and a value of one of them changes,
you now need to create a new object with all the same keys (you can still reuse values). You probably don&rsquo;t use such objects, but what about array? Let&rsquo;s see how that looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">prev</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="p">...,</span> <span class="s1">&#39;z&#39;</span><span class="p">];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">next</span> <span class="o">=</span> <span class="nx">prev</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">).</span><span class="nx">concat</span><span class="p">([</span><span class="nx">newValue</span><span class="p">]).</span><span class="nx">concat</span><span class="p">(</span><span class="nx">prev</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">n</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we need to copy the whole thing. Here is a better way to implement immutable sequences:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">prev</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;0-3&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;0-1&#39;</span><span class="o">:</span> <span class="p">{</span><span class="mi">0</span><span class="o">:</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="o">:</span> <span class="s1">&#39;b&#39;</span><span class="p">},</span>
</span><span class='line'>        <span class="s1">&#39;2-3&#39;</span><span class="o">:</span> <span class="p">{...},</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s1">&#39;4-7&#39;</span><span class="o">:</span> <span class="p">{...}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">next</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;0-3&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;0-1&#39;</span><span class="o">:</span> <span class="nx">prev</span><span class="p">[</span><span class="s1">&#39;0-3&#39;</span><span class="p">][</span><span class="s1">&#39;0-1&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="s1">&#39;2-3&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="mi">2</span><span class="o">:</span> <span class="s1">&#39;hey&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="mi">3</span><span class="o">:</span> <span class="nx">prev</span><span class="p">[</span><span class="s1">&#39;0-3&#39;</span><span class="p">][</span><span class="s1">&#39;2-3&#39;</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s1">&#39;4-7&#39;</span><span class="o">:</span> <span class="nx">prev</span><span class="p">[</span><span class="s1">&#39;4-7&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can see that we only create <code>log N</code> new objects here and the rest is reused, so even less copying and faster diffs. You also don&rsquo;t need to really deal with all this trees. There are great ready to use implementations out there. E.g. this is how our first example looks with a help of
<a href="https://github.com/facebook/immutable-js">Immutable.js</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">object</span> <span class="o">=</span> <span class="nx">Immutable</span><span class="p">.</span><span class="nx">fromJS</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">a</span><span class="o">:</span> <span class="p">{</span><span class="nx">x</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">y</span><span class="o">:</span> <span class="mi">2</span><span class="p">},</span>
</span><span class='line'>    <span class="nx">b</span><span class="o">:</span> <span class="p">{</span><span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;hi&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">object2</span> <span class="o">=</span> <span class="nx">object</span><span class="p">.</span><span class="nx">setIn</span><span class="p">([</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;y&#39;</span><span class="p">],</span> <span class="mi">3</span><span class="p">);</span> <span class="c1">// object remains intact</span>
</span></code></pre></td></tr></table></div></figure>


<p>It gives you nice API, efficiency and protection against accidentally writing to supposed to be immutable collection. Also take a look at <a href="https://github.com/swannodette/mori">mori</a> &mdash; a set of immutable collections extracted from ClojureScript.</p>

<p>Note that React actually uses naive immutable by convention collections.</p>

<h2>Wrap-up</h2>

<p>It may look from my notes that React is not a good tool, but it is actually very useful one.
It may not have magical powers and top speed, but it got components and is still pretty fast. It also offers ecosystem and community.</p>

<p>And there is one more way to look at it. React made a significant push to front-end development in an interesting direction, including all those virtual DOMs and immutable collection libraries.</p>

<p>Anyway, now that you know all this, you can judge better on what to use and how to structure your code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Growing Over Backward Incompatibility]]></title>
    <link href="http://hackflow.com/blog/2014/09/07/growing-over-backward-incompatibility/"/>
    <updated>2014-09-07T19:58:00+08:00</updated>
    <id>http://hackflow.com/blog/2014/09/07/growing-over-backward-incompatibility</id>
    <content type="html"><![CDATA[<p>Every language needs to grow. It needs to evolve. However, there is a certain barrier it builds around itself over time called &ldquo;Backward compatibility&rdquo;. Backward compatibility means you can&rsquo;t just change the thing in a best way possible, you need to comply to older design decisions, coincidences and even bugs.</p>

<p>So what should conscious designer do?</p>

<!--more-->


<h2>Possible strategies</h2>

<p>Most languages don&rsquo;t have any explicit strategy for backward incompatible changes, which is pitiful. Mainly because not having a strategy means you are using the worst one. But let&rsquo;s review possible strategies.</p>

<h4>Grow as it goes, then break big</h4>

<p>This results into separation like Python 2/3, Perl 5/6 or even in total abandonment. The major issue is that it creates a gap that most people don&rsquo;t have enough incentive to jump over. It creates additional headache to library developers making hard to support their creations across incompatibility boundary. This in its turn causes chicken and egg problem of no libraries, no users. In its worst separation could divide both ecosystem and community in half, lessening the project considerably.</p>

<h4>Move fast, break things</h4>

<p>Works well in earlier development stages. I never complained when upgrading Node.js from 0.1.x to 0.2.x broke my app as well as several dependencies. However, this effectively reduces library availability, since many authors just can&rsquo;t or interested enough to keep up with the development pace. I was astonished to hear from some of my ruby friends that they avoid using libraries not updated within 3 months as possibly abandoned ones.</p>

<p>It also poses a strain on language users forced to change their coding habits and to constantly seek for and adapt a replacement libraries for abandoned ones. Some of them consequently settle with particular language or framework version causing an erosion of a community and ecosystem.</p>

<h4>Stay small</h4>

<p>&hellip; and useless. A viable strategy for very domain specific or otherwise having narrow field languages, e.g. for education. In any other case wider audience will need language to be extended to be useful for them. The alternative is to stay small &hellip;</p>

<p>&hellip; and provide language extending capabilities. Seems like a good one. However, it hadn&rsquo;t quite worked for lots of lisps and forths. The common issue is that by not providing enough common ground you encourage separating into dialects.</p>

<p>Language of each project gets tailored to project needs, to particular team style. Communities divide, codebases become incompatible effectively narrowing the language for its users and causing confusion for newcomers.</p>

<p>The other issue with both flavors of this approach is that problem is not solved, it&rsquo;s only reduced. There is still no strategy to evolve the core.</p>

<!--
Small standard library with good packaging utilities and service will do the job.
tools do job, language is more subjective.
Unlike libraries frameworks divide people.
 -->


<h4>Rolling deprecation</h4>

<p>This is when you introduce new things leaving old intact, but marking them as deprecated. After several releases deprecated things are removed and new things take their place. Using this strategy you can continuously introduce changes while still providing a compatibility guarantee for several releases. There are, however, some considerations to this strategy.</p>

<p>First, you&rsquo;ll need new API each time you update something in backwards incompatible manner. Say you have a function to parse URLs and it returns a dict of query parameters. It however doesn&rsquo;t handle repetitive params well, it just captures last value. So you decided to update it to return a list instead. This change could break someone&rsquo;s code, so you end up with one of:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">capture_all</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">parse_all</span><span class="p">(</span><span class="n">url</span><span class="p">):</span>
</span><span class='line'>    <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Your users, respecting deprecation, litter their code with ugly <code>parse(url, True)</code> or <code>parse_all(url)</code> calls. And when finally you get rid of an old <code>parse</code> you need another round of deprecation to return to sane API. On function level this leads to <code>do_something_ex()</code> things, on module level we can see <code>urllib2</code>, <code>newforms</code> and <code>better-assert</code>.</p>

<p>Second, you&rsquo;ll obviously need to ship several implementations for things you change. This hardens managing whatever you are doing a bit. But making life easier for broader group, whatever users, by making it harder for narrower one, whatever developers, is generally a good trade-off.</p>

<p>Third, gradual change is not always possible. Say you want to change how the <code>/</code> operator works in your language. To be compatible it should work the old way in old code and a new way in new one.</p>

<!-- not friendly with semver -->


<h2>Rolling a language</h2>

<p>Making an operator work differently depending on context seems impossible, but also offers a hint to resolve both itself and API uglifying issue. So obviously first we need a way to tell new code from old. The simplest thing is just stating this explicitly, and this is already used in Python 2:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">division</span>
</span></code></pre></td></tr></table></div></figure>


<p>and in Perl 5:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="n">feature</span> <span class="s">&#39;say&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Python version has file scope and Perls lexical one. Perl also goes farther by bundling features into language versions. E.g. by:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="n">v5</span><span class="mf">.16</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>you can turn on all 5.16 features, this can also deprecate some old features or alter their behavior. Any old code without that <code>use</code> statement or with the one with earlier version continues to behave the exact way it did. So we can change a language in a backward incompatible manner while still providing compatibility with older code. <!-- What a trick! --></p>

<p>So this is it, the idea I started this post to promote. Lower I&rsquo;ll just address any issues/objections that I can think of.</p>

<h2>Issues</h2>

<p>Let&rsquo;s start from the ones from rolling deprecation section. First and last are resolved automatically, second &ndash; the need to ship several implementations bundled &ndash; remains. We can manage that by carefully storing all active implementations and providing a limit on supported versions, e.g. make <code>use v5.10</code> an error in 5.20 version of a language. We&rsquo;ll need to make this span large and stable enough though.</p>

<p>There is also an issue of how do we start this process. It&rsquo;s however rather trivial, say our language is at version 3.4 now, when to add our rolling model in 3.5, we add some form of <code>use</code> statement there and in absence of it just assume 3.4 semantics.</p>

<h3>Easy parts</h3>

<p>These ones are almost automatically solved by version declaration, still some elaboration will probably close unneeded questions.</p>

<p><strong>Syntax changes</strong>. We have a chicken and egg problem like <code>use</code> is part of syntax and it can alter syntax itself. This is however only a problem if we follow Perl 5 lead and allow it anywhere. Although it&rsquo;s cool, it has no relation to solving real problem of &ldquo;using this library written for Blab 2.7 in my Blab 3.4 code&rdquo;. So we can just require every file start with <code>use</code> statement and then parse the rest with appropriate parser. Yes, we&rsquo;ll need to ship several parser implementations, they could share code though.</p>

<p><strong>Semantic changes</strong>. Like we have the same syntactic construction or operator and it should behave in a new way. The beauty of declared version and separate parsers is that we can substitute a thing during parsing. For example, if we get tired of Python semantics of:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="k">except</span> <span class="n">E1</span><span class="p">,</span> <span class="n">E2</span><span class="p">:</span> <span class="c"># really means &quot;except E1 as E2:&quot;,</span>
</span><span class='line'>    <span class="o">...</span>        <span class="c"># not catch both as you might expect</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can just make it to parse into the same thing as <code>except (E1, E2)</code>. Altering an AST node resulting from parsing an operator is even easier.</p>

<p><strong>Built-in changes</strong>. Having all new and old built-ins implementations we&rsquo;ll need only arrange that globals are updated on <code>use</code> statement. Globals should be scoped lexically, at least at file level, for this to work. Note that by altering globals we handle all of addition, removal, rename and change of behavior of any built-in.</p>

<p><strong>Standard library changes</strong>. The easiest way is just shipping several versions of it and patching import statement to load appropriate library version. Different versions of standard libs can share code for efficiency, but that&rsquo;s optional.</p>

<h3>Passing over boundary</h3>

<p>Real issues start to arise when we pass something from newer code to older one or vice a versa. Say we have an instance of built-in or standard library type which has changed and pass it to the code that expects to treat it as an instance of an older version of same type.</p>

<p>The simplest thing to do is to provide converters and require a new code interfacing with an older one to use them. This will work, however, it will place significant burden on every forward-looking user of that old code. This is also not future compatible in a sense that if suddenly that old code is updated everyone needs to remove converter calls. And even if we manage somehow to automatically intercept all calls over boundary and convert everything there still be an issues like it could be slow or it would be impossible to share data by reference between newer and older code.</p>

<p>Given all these obstacles, being able to gradually update your code even with a use of converters is significant improvement over major break with just no way to call older code without first updating it. And converters are quite simple thing to implement. But let&rsquo;s take a view into some more elaborate ways to overcome type changes.</p>

<p>Say if a new version of a type has same internal representation and only a new interface then we can pass it as is and rely on some lexical dependent method substitution. This could sound like some unscientific magic, but there is <a href="http://www.ruby-doc.org/core-2.1.1/doc/syntax/refinements_rdoc.html">a corresponding feature</a> in ruby 2.0 and sure there is <a href="http://search.cpan.org/~chocolate/Method-Lexical/lib/Method/Lexical.pm">a perl module</a> for that. We can even incorporate active language version into method call semantics, this way changed types should just respond to all their historical interfaces in a support window, which probably won&rsquo;t be more than two.</p>

<p>What if internal representation of a type changes? The thing is that shouldn&rsquo;t matter if nobody looks inside. We should still support all the interfaces and we&rsquo;ll be good. This puts a restriction on a kind of access language users, including library authors, have to instances of built-in types. E.g. if instance data is represented with C struct then we shouldn&rsquo;t allow direct access to its members, casting, etc. Everything should be done via functions or at least macros, which could be updated to handle newer representation.</p>

<h3>Wrap-up</h3>

<p>There are obviously some things I haven&rsquo;t addressed. And this approach doesn&rsquo;t make language developers lives easier. It could however make it more fun both for developers and their users. Cause this way things don&rsquo;t need to stay broken or weird cause that&rsquo;s how they are. An ability to change language in a backward incompatible manner should in the end bring better languages for everyone. It also feels like freedom.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Every Language Needs Its Underscore]]></title>
    <link href="http://hackflow.com/blog/2014/06/22/why-every-language-needs-its-underscore/"/>
    <updated>2014-06-22T19:39:00+08:00</updated>
    <id>http://hackflow.com/blog/2014/06/22/why-every-language-needs-its-underscore</id>
    <content type="html"><![CDATA[<p><em>(This is an adaptation of a talk I gave at PyCon and DevDay. <a href="http://www.slideshare.net/hackflow/why-underscore">Slides</a> and <a href="http://www.youtube.com/watch?v=lGAC6ftYUS0#t=12100">video</a> are available in russian)</em></p>

<p>Do you know what <a href="http://underscorejs.org/">underscore</a> is? In its most general it&rsquo;s a JavaScript library that makes life better. For whoever writes in JavaScript. I mostly write Python and I also wanted my life better, so I went ahead and wrote <a href="https://github.com/Suor/funcy">a similar library for Python</a>. But the thing is you need to understand a magic behind something to properly replicate it. So what&rsquo;s the magic behind _?</p>

<!--more-->


<h2>The problem</h2>

<p>To answer this question we should look at problems this kind of libraries solve. To get some ground I&rsquo;ll illustrate them with code. That will be in python, but all the ideas are universal, so don&rsquo;t be afraid.</p>

<h3>A piece of entangled code</h3>

<p>This messy piece of code was taken from a real project and slightly simplified:</p>

<div class="example-bad">
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">images</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">url</span> <span class="ow">in</span> <span class="n">urls</span><span class="p">:</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">attempt</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">DOWNLOAD_TRIES</span><span class="p">):</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">images</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">download_image</span><span class="p">(</span><span class="n">url</span><span class="p">))</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>        <span class="k">except</span> <span class="n">HttpError</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">attempt</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">==</span> <span class="n">DOWNLOAD_TRIES</span><span class="p">:</span>
</span><span class='line'>                <span class="k">raise</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>There are several things entangled in here, but my point is that this could be written much shorter:</p>

<div class="example-good">
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">http_retry</span> <span class="o">=</span> <span class="n">retry</span><span class="p">(</span><span class="n">DOWNLOAD_TRIES</span><span class="p">,</span> <span class="n">HttpError</span><span class="p">)</span>
</span><span class='line'><span class="n">images</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="n">http_retry</span><span class="p">(</span><span class="n">download_image</span><span class="p">),</span> <span class="n">urls</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>If it seems hard at first, then it&rsquo;s okay. It involves some functions and <a href="http://hackflow.com/blog/2013/10/08/abstracting-control-flow/">control flow abstractions</a> most probably new to you. Once you get used to it you&rsquo;ll find that the latter variant is not only shorter, but is also simpler.</p>

<h3>Dirty dictionary</h3>

<p>But let&rsquo;s go on and clean some dirty dictionary:</p>

<div class="example-bad">
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">request</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">d</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'>    <span class="k">except</span> <span class="p">(</span><span class="ne">TypeError</span><span class="p">,</span> <span class="ne">ValueError</span><span class="p">):</span>
</span><span class='line'>        <span class="n">d</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>Here we go through dictionary and clean its values by coercing them to <code>int</code>. Or to <code>None</code> if that is impossible. Cleaning input and ignoring malformed data is quite frequent task and yet it takes so much effort. This is the way I want to write that:</p>

<div class="example-good">
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">walk_values</span><span class="p">(</span><span class="n">silent</span><span class="p">(</span><span class="nb">int</span><span class="p">),</span> <span class="n">request</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>And it&rsquo;s entirely possible with <a href="https://github.com/Suor/funcy">funcy</a>. But let&rsquo;s move to the next one.</p>

<h3>Pairwise iteration</h3>

<p>This code checks if a sequence is ascending:</p>

<div class="example-bad">
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">prev</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">seq</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">prev</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">x</span> <span class="o">&lt;=</span> <span class="n">prev</span><span class="p">:</span>
</span><span class='line'>        <span class="n">is_ascending</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>    <span class="n">prev</span> <span class="o">=</span> <span class="n">x</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">is_ascending</span> <span class="o">=</span> <span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>Ah, iterating over a sequence and keeping track of a previous element. How many times had you done that? There should be a function to abstract it:</p>

<div class="example-good">
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">is_ascending</span> <span class="o">=</span> <span class="nb">all</span><span class="p">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span> <span class="k">for</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">pairwise</span><span class="p">(</span><span class="n">seq</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<p>And <a href="http://funcy.readthedocs.org/en/latest/seqs.html#pairwise">pairwise</a> does exactly that. It enables us to iterate by sequence adjacent pairs. So we just need to check that all of them are ordered accordingly.</p>

<h3>&hellip;</h3>

<p>All these examples have one common property &mdash; red variants have more code. And more code:</p>

<ul>
<li>takes longer to write,</li>
<li>takes longer to read,</li>
<li>takes longer to debug,</li>
<li>contains more bugs.</li>
</ul>


<p>Obviously, underscore, funcy and friends help us write less code (at least in these three examples). But how do they do that?</p>

<h2>Extracting abstractions</h2>

<p>Let&rsquo;s take another look at the first example. It does three things in a single blob of code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code><span class='green'>images</span> <span class='blue'>= []
</span><span class='blue'>for url in</span> <span class='green'>urls</span><span class='blue'>:
</span><span class='red'>    for attempt in range(DOWNLOAD_TRIES):
</span><span class='red'>        try:
</span><span class='green'>            images</span><span class='blue'>.append(</span><span class='green'>download_image(</span><span class='blue'>url</span><span class='green'>)</span><span class='blue'>)
</span><span class='red'>            break
</span><span class='red'>        except HttpError:
</span><span class='red'>            if attempt + 1 == DOWNLOAD_TRIES:
</span><span class='red'>                <span class="k">raise
</span></code></pre></td></tr></table></div></figure>


<p>I highlighted every aspect of this code with separate color:</p>

<ul>
<li>image download (green),</li>
<li>retries on fails (red),</li>
<li>iteration through urls and result collection (blue).</li>
</ul>


<p>As you can see, three colors are interleaved here. This hints that corresponding aspects are entangled. And by &ldquo;entangled&rdquo; I mean they can not be reused separately. Say we need retries on fails in some other place, we will probably end up copying the whole block and updating it somewhat. Not exactly the best practice &ldquo;code reuse&rdquo;.</p>

<p>If, on the other hand, we managed to separate reties then our code will look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code><span class='red'>def retry(...):
    ...

http_retry = retry(DOWNLOAD_TRIES, HttpError)
</span><span class='green'>images</span> <span class='blue'>= []
</span><span class='blue'>for url in</span> <span class='green'>urls</span><span class='blue'>:
</span><span class='green'>    images</span><span class='blue'>.append(</span><span class='red'>http_retry(</span><span class='green'>download_image</span><span class='red'>)</span><span class='blue'>(url))
</span></code></pre></td></tr></table></div></figure>


<p>Now red code is nicely grouped at the top. Green and blue are still mixed, but now they represent a pattern so common that most modern languages have a builtin function to handle that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code><span class='red'>def retry(...):
    ...

http_retry = retry(DOWNLOAD_TRIES, HttpError)
</span><span class='green'>images</span> <span class='blue'>= map(<span class='red'>http_retry(</span><span class='green'>download_image</span><span class='red'>)</span><span class='blue'>, <span class='green'>urls</span><span class='blue'>)
</span></code></pre></td></tr></table></div></figure>


<p>This last variant has some lovely traits: each part of a task at hand (downloading images) appear only once, the whole iteration aspect is handled with a single <code>map()</code> call and retries are abstracted out into <a href="http://funcy.readthedocs.org/en/latest/flow.html#retry">the retry function</a>.</p>

<p>Extracting common behavior into a higher order functions is a first trick underscore and funcy use to make your life better.</p>

<h2>Hiding low level</h2>

<p>It&rsquo;s time to go back to second example. I&rsquo;ll throw away error handling to make snippets more even:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Using function</span>
</span><span class='line'><span class="n">walk_values</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="n">request</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Using dict comprehension</span>
</span><span class='line'><span class="p">{</span><span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">request</span><span class="o">.</span><span class="n">items</span><span class="p">()}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now they are both one-liners, so how is first one better? Let&rsquo;s identify every single distinct component of each code variant:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># 3 components</span>
</span><span class='trend3'>walk_values(</span><span class='trend4'>int</span><span class='trend3'>,</span> <span class='trend8'>request</span><span class='trend3'>)
</span><span class='line'>
</span><span class='line'><span class="c"># 8 or so components</span>
</span><span class='line'><span class='trend3'>{</span><span class='trend0'>k</span><span class='trend3'>:</span> <span class='trend4'>int(</span><span class='trend6'>v</span><span class='trend4'>)</span> <span class='trend9'>for</span> <span class='trend0'>k</span><span class='trend7'>,</span> <span class='trend6'>v</span> <span class='trend9'>in</span> <span class='trend8'>request</span><span class='trend5'>.items()</span><span class='trend3'>}
</span></code></pre></td></tr></table></div></figure>


<p>The second one looks like rainbow. But besides looking nice this means each time you write or read it you need to load all those components into your head, taking up all your cognitive resources. This is how first line is better.</p>

<p>That could be highlighted in even more obvious manner:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='trend3'>walk_values(int, request)
</span><span class='line'>
</span><span class='line'><span class="c"># red are low-level details</span>
</span><span class='line'><span class='trend3'>{</span><span class='trend8'>k</span><span class='trend3'>: int(</span><span class='trend8'>v</span><span class='trend3'>)</span> <span class='trend8'>for k, v in</span> <span class='trend3'>request</span><span class='trend8'>.items()</span><span class='trend3'>}
</span></code></pre></td></tr></table></div></figure>


<p>This way we can see that about a half of the second line is low-level details. And low-level mean you don&rsquo;t need to know all those details to understand what&rsquo;s going on.</p>

<p>Hiding low-level details is the second way such libraries make your life better.</p>

<h2>Enriching our language</h2>

<p>I&rsquo;ll translate the last example into natural language:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">prev</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">seq</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">prev</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">x</span> <span class="o">&lt;=</span> <span class="n">prev</span><span class="p">:</span>
</span><span class='line'>        <span class="n">is_ascending</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>    <span class="n">prev</span> <span class="o">=</span> <span class="n">x</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">is_ascending</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'><span class="c"># Starting with empty prev, iterate over seq, bookkeeping prev actuality,</span>
</span><span class='line'><span class="c"># on each cycle if prev is present and current element is less or equal than it</span>
</span><span class='line'><span class="c"># then set is_ascending to False and break.</span>
</span><span class='line'><span class="c"># If loop wasn&#39;t broken set is_ascending to True</span>
</span><span class='line'>
</span><span class='line'><span class="n">is_ascending</span> <span class="o">=</span> <span class="nb">all</span><span class="p">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span> <span class="k">for</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">pairwise</span><span class="p">(</span><span class="n">seq</span><span class="p">))</span>
</span><span class='line'><span class="c"># set is_ascending to all left elements being smaller than right</span>
</span><span class='line'><span class="c"># in adjacent pairs of seq</span>
</span></code></pre></td></tr></table></div></figure>


<p>Obviously, more code emits more text. Higher level code generates an explanation utilizing higher level abstractions. This way we can use bigger building blocks not only in coding, but in problem solving.</p>

<p>And this is the third way _ makes your life better.</p>

<h2>Wrap-up</h2>

<p>All the things we came through are completely language independent. So there gotta be underscore for every language? Not quite, and more importantly a straight-forward port is not always a great idea: common behaviors to abstract vary per language and especially per application. The right approach would be to follow core ideas. Or look around if someone have already done that.</p>

<p>Here are some leads for you to take:</p>

<table>
<thead>
<tr>
<th>Language    </th>
<th> Libraries</th>
</tr>
</thead>
<tbody>
<tr>
<td>JavaScript  </td>
<td> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype">Array</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype">Function</a>, <a href="http://underscorejs.org/">Underscore</a>, <a href="http://lodash.com/">lowdash</a></td>
</tr>
<tr>
<td>Python      </td>
<td> <a href="https://docs.python.org/2/library/itertools.html">itertools</a>, <a href="https://docs.python.org/2/library/functools.html">functools</a>, <a href="https://github.com/Suor/funcy">funcy</a>, <a href="https://github.com/pytoolz/toolz">toolz</a>, <a href="https://github.com/kachayev/fn.py">fn.py</a></td>
</tr>
<tr>
<td>Ruby        </td>
<td> <a href="http://www.ruby-doc.org/core/Enumerable.html">Enumerable</a>, <a href="http://guides.rubyonrails.org/active_support_core_extensions.html">ActiveSupport</a></td>
</tr>
<tr>
<td>PHP         </td>
<td> <a href="https://github.com/lstrojny/functional-php">functional-php</a>, <a href="https://github.com/brianhaveri/Underscore.php">Underscore.php</a></td>
</tr>
<tr>
<td>Clojure     </td>
<td> <a href="http://richhickey.github.io/clojure/clojure.core-api.html">clojure.core</a></td>
</tr>
<tr>
<td>Java        </td>
<td> <a href="http://functionaljava.org/">FunctionalJava</a></td>
</tr>
<tr>
<td>C#          </td>
<td> <a href="http://msdn.microsoft.com/ru-ru/library/bb397926.aspx">LINQ</a></td>
</tr>
<tr>
<td>Objective-C </td>
<td> <a href="http://underscorem.org/">Underscore.m</a></td>
</tr>
</tbody>
</table>


<p><strong>P.S.</strong> You may also want to look at <a href="http://www.scala-lang.org/">Scala</a> if you are using JVM and at <a href="http://www.tryfsharp.org/">F#</a> if it&rsquo;s .NET.</p>

<p><strong>P.P.S.</strong> Please stop commenting on Hacker News, a controversial penalty is killing this post. Use <a href="http://www.reddit.com/r/programming/comments/28se2h/why_every_language_needs_its_underscore/">reddit thread</a> instead. Sadly, HN is not a place for discussions anymore.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On ORM Cache Invalidation]]></title>
    <link href="http://hackflow.com/blog/2014/03/09/on-orm-cache-invalidation/"/>
    <updated>2014-03-09T19:50:00+08:00</updated>
    <id>http://hackflow.com/blog/2014/03/09/on-orm-cache-invalidation</id>
    <content type="html"><![CDATA[<p>Cache invalidation is probably one of the hardest things in computer programming. I understand it as finding a subtle compromise between completeness, redundancy and complexity. I would like to tap into this topic in a context of caching queries built via ORM.</p>

<!--more-->


<p>I will move from basic ideas building upon them as needed and diving into more and more specifics as the post goes.</p>

<h2>Completeness and redundancy</h2>

<p>Let&rsquo;s start from some general considerations. I define abovesaid completeness as a characteristic of invalidation procedure describing how frequent and under what circumstances data can become dirty and how long it will remain accessible. And redundancy will be a frequency and a volume of cache invalidated needlessly.</p>

<p>An example will help us perceive these two concepts better. Let&rsquo;s look at common time-invalidated cache. On one hand, it inevitably leads to dirty data between update and cache timeout, making this algorithm inherently incomplete. On other hand, we can easily reduce incompleteness by reducing cache timeout, which, in it&rsquo;s turn, will increase redundancy &ndash; clean cache data will be invalidated more frequently, which will lead to more cache misses. And for ideal completeness (no dirty data) we need to set timeout to zero.</p>

<p>There are lots of scenarios where it&rsquo;s ok to use stale data: popular articles list doesn&rsquo;t change fast and it&rsquo;s not a big deal if user count of your social network is off by a couple of thousands. But then there are some scenarios where you need immediate invalidation, go to next section for that.</p>

<h2>Event-driven invalidation</h2>

<p>Probably, the only way to achieve ideal invalidation completeness is to invalidate each time you change data. These are elements of such system we need to think about:</p>

<ul>
<li>cached things,</li>
<li>events,</li>
<li>a dependency matrix explaining what thing to invalidate on what event.</li>
</ul>


<p>There are obviously different strategies to define those in your code. I&rsquo;ll start from simplest one &ndash; manual definition.</p>

<h2>Coding dependencies by hand</h2>

<p>First, cached things, they will probably look like this (in sort of python pseudo-code):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># An ellipsis means some code or instruction to get corresponding data</span>
</span><span class='line'><span class="n">register_cached_item</span><span class="p">(</span><span class="s">&#39;post_by_id&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">)</span>
</span><span class='line'><span class="n">register_cached_item</span><span class="p">(</span><span class="s">&#39;posts_by_category&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">)</span>
</span><span class='line'><span class="n">register_cached_item</span><span class="p">(</span><span class="s">&#39;recent_posts&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">)</span>
</span><span class='line'><span class="n">register_cached_item</span><span class="p">(</span><span class="s">&#39;posts_by_tag&#39;</span><span class="p">,</span> <span class="o">...</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Used like</span>
</span><span class='line'><span class="n">post</span> <span class="o">=</span> <span class="n">get</span><span class="p">(</span><span class="s">&#39;post_by_id&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="n">invalidate</span><span class="p">(</span><span class="s">&#39;post_by_id&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember this is pseudo-code. <code>register_cached_item()</code> doesn&rsquo;t need to be a function call, it could be a decorator in Python, a macro in lisp or a class in Java.</p>

<p>Ok, say we have some place in our code that adds post, we then need to add something like this there:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># ...</span>
</span><span class='line'><span class="c"># Just added post, need to invalidate things</span>
</span><span class='line'><span class="n">invalidate</span><span class="p">(</span><span class="s">&#39;post_by_id&#39;</span><span class="p">,</span> <span class="n">post</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'><span class="n">invalidate</span><span class="p">(</span><span class="s">&#39;posts_by_category&#39;</span><span class="p">,</span> <span class="n">post</span><span class="o">.</span><span class="n">category_id</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># It could be recent</span>
</span><span class='line'><span class="n">invalidate</span><span class="p">(</span><span class="s">&#39;recent_posts&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Invalidate for all tags</span>
</span><span class='line'><span class="k">for</span> <span class="n">tag</span> <span class="ow">in</span> <span class="n">post</span><span class="o">.</span><span class="n">tags</span><span class="p">:</span>
</span><span class='line'>    <span class="n">invalidate</span><span class="p">(</span><span class="s">&#39;posts_by_tag&#39;</span><span class="p">,</span> <span class="n">tag</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And if we delete post somewhere we need to make invalidation there too. We should obviously abstract our code into some <code>invalidate_post()</code> function and call it from both places. So far, so good. What about updating? The thing is it&rsquo;s not enough to just call our invalidation procedure from there:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">post</span> <span class="o">=</span> <span class="n">get</span><span class="p">(</span><span class="s">&#39;post_by_id&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="k">assert</span> <span class="n">post</span><span class="o">.</span><span class="n">category</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'><span class="n">post</span><span class="o">.</span><span class="n">category</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="n">update_post</span><span class="p">(</span><span class="n">post</span><span class="p">)</span>
</span><span class='line'><span class="n">invalidate_post</span><span class="p">(</span><span class="n">post</span><span class="p">)</span> <span class="c"># &#39;posts_by_category&#39; not invalidated for category 1!</span>
</span></code></pre></td></tr></table></div></figure>


<p>We need to invalidate on both old and new states of a post on update. How we get old state is a separate not an easy question, but suppose we have both states, should we just call <code>invalidate_post()</code> twice for each of them? Not so efficient, but that would work.</p>

<p>There is a problem with our code though. It&rsquo;s tightly coupled &ndash; update logic knows about cache logic. Even bigger problem is that our cache logic is scattered. We define cached thing in one place and invalidate in another or several other places. This means there will come some day when someone will add a cached thing and just forget to add corresponding invalidation, producing hard to find bug.</p>

<h2>Bringing things together</h2>

<p>Fortunately, there is a single solution to both problems &ndash; events. We can write fetching and invalidation logic for each thing in one place and then register both cached thing and event listener:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">post_by_id</span><span class="p">(</span><span class="nb">id</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># ...</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">invalidate_post_by_id</span><span class="p">(</span><span class="n">post</span><span class="p">):</span> <span class="c"># event signature here</span>
</span><span class='line'>    <span class="n">invalidate</span><span class="p">(</span><span class="s">&#39;post_by_id&#39;</span><span class="p">,</span> <span class="n">post</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">register_cached_thing</span><span class="p">(</span><span class="s">&#39;post_by_id&#39;</span><span class="p">,</span> <span class="n">fetch</span><span class="o">=</span><span class="n">post_by_id</span><span class="p">,</span> <span class="n">invalidate</span><span class="o">=</span><span class="n">invalidate_post_by_id</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As invalidate procedures would be tiresomely repetitive we can dry this up to (and even further using particular language sugar features):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">post_by_id</span><span class="p">(</span><span class="nb">id</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># ...</span>
</span><span class='line'><span class="n">register_cached_thing</span><span class="p">(</span><span class="s">&#39;post_by_id&#39;</span><span class="p">,</span> <span class="n">fetch</span><span class="o">=</span><span class="n">post_by_id</span><span class="p">,</span> <span class="n">arg</span><span class="o">=</span><span class="k">lambda</span> <span class="n">p</span><span class="p">:</span> <span class="n">p</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looks like we&rsquo;ve come up with pretty solid system. It&rsquo;s dry, but retains flexibility of still mostly manual system. We, however, need to declare each thing we plan to cache in advance. We also need to provide argument constructing functions. There got to be a smarter way.</p>

<h2>Automatic invalidation</h2>

<p>We have not even started utilizing a power of ORM. Its query is not a mere text and plain arguments, it is a structure which includes condition tree. And some smart code could use that information to determine when query cache should be invalidated, saving work for lazy guys like me.</p>

<p>Suppose we cache a query:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">post</span> <span class="k">where</span> <span class="n">category_id</span> <span class="o">=</span> <span class="mi">2</span> <span class="k">and</span> <span class="n">published</span>
</span></code></pre></td></tr></table></div></figure>


<p>We should drop that cache when we add, update or delete post with its old or new state satisfying <code>category_id = 2 and published</code> condition. So the time we save that cache we should write along &ldquo;invalidator&rdquo; like that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">category_id</span> <span class="o">=</span> <span class="mi">2</span> <span class="k">and</span> <span class="n">published</span><span class="p">:</span> <span class="n">K1</span> <span class="c1">-- K1 is above query cache key</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then if some post changes we look up all invalidators and check their conditions with post at hand, deleting cache keys corresponding to holding ones. That could become very inefficient once we&rsquo;ll have lots of queries cached.</p>

<p>The reason we will end up with lots of invalidators is that we have cached lots of different queries. In common use, however, most queries will differ only in parameters not structure. Maybe separating those will help us? Let&rsquo;s try on larger example. Here be the queries:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">post</span> <span class="k">where</span> <span class="n">category_id</span> <span class="o">=</span> <span class="mi">2</span> <span class="k">and</span> <span class="n">published</span>           <span class="c1">-- K1</span>
</span><span class='line'><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">post</span> <span class="k">where</span> <span class="n">category_id</span> <span class="o">=</span> <span class="mi">2</span> <span class="k">and</span> <span class="n">published</span> <span class="k">limit</span> <span class="mi">20</span>  <span class="c1">-- K2</span>
</span><span class='line'><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">post</span> <span class="k">where</span> <span class="n">category_id</span> <span class="o">=</span> <span class="mi">3</span> <span class="k">and</span> <span class="n">published</span>           <span class="c1">-- K3</span>
</span><span class='line'><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">post</span> <span class="k">where</span> <span class="n">category_id</span> <span class="o">=</span> <span class="mi">3</span> <span class="k">and</span> <span class="k">not</span> <span class="n">published</span>       <span class="c1">-- K4</span>
</span><span class='line'><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">post</span> <span class="k">where</span> <span class="n">id</span> <span class="o">&gt;</span> <span class="mi">7</span>                                  <span class="c1">-- K5</span>
</span><span class='line'><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">post</span> <span class="k">where</span> <span class="n">category_id</span> <span class="o">=</span> <span class="mi">2</span> <span class="k">and</span> <span class="n">published</span> <span class="k">or</span> <span class="n">id</span> <span class="o">&gt;</span> <span class="mi">7</span> <span class="c1">-- K6</span>
</span><span class='line'><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">post</span> <span class="k">where</span> <span class="n">category_id</span> <span class="k">in</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="k">and</span> <span class="n">published</span>     <span class="c1">-- K7</span>
</span><span class='line'><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">post</span> <span class="k">where</span> <span class="n">category_id</span> <span class="o">=</span> <span class="mi">2</span> <span class="k">and</span> <span class="n">id</span> <span class="o">&lt;</span> <span class="mi">7</span>              <span class="c1">-- K8</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unseparated invalidators first:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">category_id</span> <span class="o">=</span> <span class="mi">2</span> <span class="k">and</span> <span class="n">published</span><span class="p">:</span>           <span class="n">K1</span><span class="p">,</span> <span class="n">K2</span>
</span><span class='line'><span class="n">category_id</span> <span class="o">=</span> <span class="mi">3</span> <span class="k">and</span> <span class="n">published</span><span class="p">:</span>           <span class="n">K3</span>
</span><span class='line'><span class="n">category_id</span> <span class="o">=</span> <span class="mi">3</span> <span class="k">and</span> <span class="k">not</span> <span class="n">published</span><span class="p">:</span>       <span class="n">K4</span>
</span><span class='line'><span class="n">id</span> <span class="o">&gt;</span> <span class="mi">7</span><span class="p">:</span>                                  <span class="n">K5</span>
</span><span class='line'><span class="n">category_id</span> <span class="o">=</span> <span class="mi">2</span> <span class="k">and</span> <span class="n">published</span> <span class="k">or</span> <span class="n">id</span> <span class="o">&gt;</span> <span class="mi">7</span><span class="p">:</span> <span class="n">K6</span>
</span><span class='line'><span class="n">category_id</span> <span class="k">in</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="k">and</span> <span class="n">published</span><span class="p">:</span>     <span class="n">K7</span>
</span><span class='line'><span class="n">category_id</span> <span class="o">=</span> <span class="mi">3</span> <span class="k">and</span> <span class="n">id</span> <span class="o">&lt;</span> <span class="mi">7</span><span class="p">:</span>              <span class="n">K8</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can use some tricks to make this more regular. <code>or</code>ed conditions could be split into two, <code>in</code> is basically syntax sugar for <code>or</code> and boolean tests could be substituted with equalities. Applying these we get to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">category_id</span> <span class="o">=</span> <span class="mi">2</span> <span class="k">and</span> <span class="n">published</span> <span class="o">=</span> <span class="k">true</span><span class="p">:</span>  <span class="n">K1</span><span class="p">,</span> <span class="n">K2</span><span class="p">,</span> <span class="n">K6</span><span class="p">,</span> <span class="n">K7</span>
</span><span class='line'><span class="n">category_id</span> <span class="o">=</span> <span class="mi">3</span> <span class="k">and</span> <span class="n">published</span> <span class="o">=</span> <span class="k">true</span><span class="p">:</span>  <span class="n">K3</span><span class="p">,</span> <span class="n">K7</span>
</span><span class='line'><span class="n">category_id</span> <span class="o">=</span> <span class="mi">3</span> <span class="k">and</span> <span class="n">published</span> <span class="o">=</span> <span class="k">false</span><span class="p">:</span> <span class="n">K4</span>
</span><span class='line'><span class="n">id</span> <span class="o">&gt;</span> <span class="mi">7</span><span class="p">:</span>                                <span class="n">K5</span><span class="p">,</span> <span class="n">K6</span>
</span><span class='line'><span class="n">category_id</span> <span class="o">=</span> <span class="mi">3</span> <span class="k">and</span> <span class="n">id</span> <span class="o">&lt;</span> <span class="mi">7</span><span class="p">:</span>            <span class="n">K8</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that after this transformation all conditions became simple conjunctions. And we are finally ready to separate condition scheme from data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">-- Schemes</span>
</span><span class='line'><span class="n">category_id</span> <span class="o">=</span> <span class="o">?</span> <span class="k">and</span> <span class="n">published</span> <span class="o">=</span> <span class="o">?</span> <span class="c1">-- S1</span>
</span><span class='line'><span class="n">id</span> <span class="o">&gt;</span> <span class="o">?</span>                            <span class="c1">-- S2</span>
</span><span class='line'><span class="n">category_id</span> <span class="o">=</span> <span class="o">?</span> <span class="k">and</span> <span class="n">id</span> <span class="o">&lt;</span> <span class="o">?</span>        <span class="c1">-- S3</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Conjunctions</span>
</span><span class='line'><span class="n">S1</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="k">true</span><span class="p">:</span>  <span class="n">K1</span><span class="p">,</span> <span class="n">K2</span><span class="p">,</span> <span class="n">K6</span><span class="p">,</span> <span class="n">K7</span>
</span><span class='line'><span class="n">S1</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span><span class="k">true</span><span class="p">:</span>  <span class="n">K3</span><span class="p">,</span> <span class="n">K7</span>
</span><span class='line'><span class="n">S1</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span><span class="k">false</span><span class="p">:</span> <span class="n">K4</span>
</span><span class='line'><span class="n">S2</span><span class="p">:</span><span class="mi">7</span><span class="p">:</span>       <span class="n">K5</span><span class="p">,</span> <span class="n">K6</span>
</span><span class='line'><span class="n">S3</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span><span class="mi">7</span><span class="p">:</span>     <span class="n">K8</span>
</span></code></pre></td></tr></table></div></figure>


<p>Time to try modeling invalidation procedure. Say we are adding this post to our stock:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="err">{</span><span class="n">id</span><span class="p">:</span> <span class="mi">42</span><span class="p">,</span> <span class="n">category_id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="n">published</span><span class="p">:</span> <span class="k">true</span><span class="p">,</span> <span class="n">title</span><span class="p">:</span> <span class="ss">&quot;...&quot;</span><span class="p">,</span> <span class="n">content</span><span class="p">:</span> <span class="ss">&quot;...&quot;</span><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looking at <code>S1</code> we can see that there is at most one conjunction of that scheme satisfying our state! Even better, we can build it from scheme and object data by looking at field values: each known value is equal only to itself. Too bad the trick won&rsquo;t work with <code>S2</code> cause our post id, 42, is greater than many things. To find what queries of scheme <code>S2</code> should be invalidated one needs to look through all <code>S2:*</code> conjunctions and that could be a lot.</p>

<p>This is probably a case for trade-off. Dropping all conditions but equalities we will sacrifice invalidation granularity, but simplify and speed up the procedure. Simplified invalidators will look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">-- Schemes</span>
</span><span class='line'><span class="n">category_id</span> <span class="o">=</span> <span class="o">?</span> <span class="k">and</span> <span class="n">published</span> <span class="o">=</span> <span class="o">?</span> <span class="c1">-- S1</span>
</span><span class='line'>                                  <span class="c1">-- S2, an empty scheme</span>
</span><span class='line'><span class="n">category_id</span> <span class="o">=</span> <span class="o">?</span>                   <span class="c1">-- S3</span>
</span><span class='line'>
</span><span class='line'><span class="c1">-- Conjunctions</span>
</span><span class='line'><span class="n">S1</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="k">true</span><span class="p">:</span>  <span class="n">K1</span><span class="p">,</span> <span class="n">K2</span><span class="p">,</span> <span class="n">K6</span><span class="p">,</span> <span class="n">K7</span>
</span><span class='line'><span class="n">S1</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span><span class="k">true</span><span class="p">:</span>  <span class="n">K3</span><span class="p">,</span> <span class="n">K7</span>
</span><span class='line'><span class="n">S1</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span><span class="k">false</span><span class="p">:</span> <span class="n">K4</span>
</span><span class='line'><span class="n">S2</span><span class="p">::</span>        <span class="n">K5</span><span class="p">,</span> <span class="n">K6</span> <span class="c1">-- no data for S2</span>
</span><span class='line'><span class="n">S3</span><span class="p">:</span><span class="mi">3</span><span class="p">:</span>       <span class="n">K8</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are some points worth noting here. First, <code>S2</code> is now an empty scheme with a single empty conjunction which is always true, which means <code>K5</code> and <code>K6</code> will be invalidated on any post change. Second, schemes are now just sets of field names, pretty neat.</p>

<p>So far I tried to stay language and platform agnostic, but that journey came to an end. Welcome to dirty reality in the next section.</p>

<h2>Implementation tips</h2>

<ul>
<li><p>A best way to represent scheme is probably alphabetically sorted list of field names, it&rsquo;s easily serializable and it makes building a conjunction for an object pretty straightforward.</p></li>
<li><p>Extracting conjunctions from a query tree could be tricky. One might want to employ <a href="http://en.wikipedia.org/wiki/Fuzzy_logic">fuzzy logic</a>: look at <code>not (f &gt; 0 and g != 1)</code>, if we drop <code>f &gt; 0</code> right away, we&rsquo;ll end up with <code>g = 1</code>, which is not equivalent to <code>f &lt;= 0 or g = 1</code>. Lost empty conjunction along the way!</p></li>
<li><p>Considering invalidator structure (sets) and taking into account that it is generally a good idea to keep all interdependent data together (cache and invalidators) this is an excellent case to use <a href="http://redis.io">Redis</a>. Using it we can easily add keys to conjunctions, we can even do <code>SUNION</code> of conjunctions to fetch all dirty keys in one shot.</p></li>
</ul>


<p>Sure, I went ahead and used that tips in my <a href="https://github.com/Suor/django-cacheops">Django caching solution</a>. Hope it or the ideas it embodies would be helpful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Painless Decorators]]></title>
    <link href="http://hackflow.com/blog/2013/11/03/painless-decorators/"/>
    <updated>2013-11-03T20:07:00+08:00</updated>
    <id>http://hackflow.com/blog/2013/11/03/painless-decorators</id>
    <content type="html"><![CDATA[<p>Decorators are joy to use. Write? Not so much. One needs to mess with wrappers, function metadata and a fair amount of bookkeeping. Enough things to bury any useful semantics under them. There got to be a better way.</p>

<p>Let&rsquo;s find that out.</p>

<!--more-->


<h2>Current state</h2>

<p>Currently in a decorator you need to create a wrapper, update it&rsquo;s metadata and then return it. You also need to pass arguments and result value in and out carefully. A typical pattern would be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">wraps</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">some_decorator</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>    <span class="nd">@wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># ... do something before</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>        <span class="c"># ... do something after</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">wrapper</span>
</span></code></pre></td></tr></table></div></figure>


<p>And if you want decorator with arguments it becomes even harder:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">some_decorator</span><span class="p">(</span><span class="n">before</span><span class="p">,</span> <span class="n">after</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">decorator</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class='line'>        <span class="nd">@wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>            <span class="n">before</span><span class="p">()</span>
</span><span class='line'>            <span class="n">result</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>            <span class="n">after</span><span class="p">()</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">result</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">wrapper</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">decorator</span>
</span></code></pre></td></tr></table></div></figure>


<p>Look at that code for a minute. What a mess! And this is not about typing, it&rsquo;s really hard to see through to the point of it.</p>

<p>Let&rsquo;s see what is meaningful and what is a boilerplate here. What we care about is concentrated in <code>wrapper</code> function, it&rsquo;s <code>before</code> and <code>after</code> calls, how they surround original function call, what arguments are passed to it and what is returned. The name <code>some_decorator</code> and its arguments also matter. Anything else &ndash; nested functions and returns, <code>@wraps</code> and all extra indent &ndash; is just <a href="http://hackflow.com/blog/2013/10/08/abstracting-control-flow/">code pattern waiting to be abstracted</a>.</p>

<h2>Removing a boilerplate</h2>

<p>What we probably want to see (or write) is some flat syntax with code showing only wrapper semantics. Something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">some_decorator</span><span class="p">(</span><span class="o">...</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># ... do something before</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># ... do something after</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span>
</span></code></pre></td></tr></table></div></figure>


<p>Obviously <code>func</code>, <code>args</code> and <code>kwargs</code> should come from somewhere as well as all the magic turning plain function into decorator. Suppose we have <code>@decorator</code> to handle the conversion and the easiest way to provide all values is just enclosing them as <code>some_decorator</code> arguments:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@decorator</span>
</span><span class='line'><span class="k">def</span> <span class="nf">some_decorator</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># ... do something before</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># ... do something after</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span>
</span></code></pre></td></tr></table></div></figure>


<p>Calling decorated function with the same arguments as its wrapper is a pattern so common that we should abstract that too. Also, our decorator may become too cluttered once we start adding its own arguments. To keep this clean we can substitute three call related arguments with a single <code>call</code> object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@decorator</span>
</span><span class='line'><span class="k">def</span> <span class="nf">some_decorator</span><span class="p">(</span><span class="n">call</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># ... do something before</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">call</span><span class="p">()</span>
</span><span class='line'>    <span class="c"># ... do something after</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looks simple and to the point. Something we were looking for. And once we have a clear view we can go ahead and implement the magic. Actually, you can <a href="https://pypi.python.org/pypi/funcy">download it from pypi</a> right now and import it with <code>from funcy import decorator</code>.</p>

<h2>Advanced usage</h2>

<p>We seemingly lost a couple of features in our quest for simplicity: access to call arguments, function itself, ability to call function differently and create decorators with arguments. But that&rsquo;s not the case really, we can pack all these into <code>call</code> object. I&rsquo;ll go through everything with better examples than you saw so far.</p>

<h3>Accessing function arguments</h3>

<p>You didn&rsquo;t expect a post about decorators without logging example, did you? Anyway, it&rsquo;s an excellent way to show how you can access not only call arguments but decorated function itself:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@decorator</span>
</span><span class='line'><span class="k">def</span> <span class="nf">log</span><span class="p">(</span><span class="n">call</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Calling </span><span class="si">%s</span><span class="s"> with args </span><span class="si">%s</span><span class="s"> and kwargs </span><span class="si">%s</span><span class="s">&quot;</span>         \
</span><span class='line'>        <span class="o">%</span> <span class="p">(</span><span class="n">call</span><span class="o">.</span><span class="n">_func</span><span class="o">.</span><span class="n">__name__</span><span class="p">,</span> <span class="n">call</span><span class="o">.</span><span class="n">_args</span><span class="p">,</span> <span class="n">call</span><span class="o">.</span><span class="n">_kwargs</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">call</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, everything is underscore-prefixed, this is done to avoid clashes with function argument names, the values of which are binded to <code>call</code> object as attributes. Pretty handy if you are writing something more specific than logging decorator. Look at this simplified <code>login_required</code> decorator to get a foretaste:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@decorator</span>
</span><span class='line'><span class="k">def</span> <span class="nf">login_required</span><span class="p">(</span><span class="n">call</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">call</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">is_authenticated</span><span class="p">():</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">call</span><span class="p">()</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="n">LOGIN_URL</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Altering calls</h3>

<p>Is considered a bad practice cause it makes code harder to read. However, this could be useful occasionally and I am not into childproofing anyway. The obvious way to do it is just using plain function carefully stored in <code>call._func</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@decorator</span>
</span><span class='line'><span class="k">def</span> <span class="nf">int_args</span><span class="p">(</span><span class="n">call</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Coerces any function arguments to ints&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">call</span><span class="o">.</span><span class="n">_func</span><span class="p">(</span><span class="o">*</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="n">call</span><span class="o">.</span><span class="n">_args</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>But a common use-case of passing some extra data to function could be written with more elegance:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@decorator</span>
</span><span class='line'><span class="k">def</span> <span class="nf">with_phone</span><span class="p">(</span><span class="n">call</span><span class="p">):</span>
</span><span class='line'>    <span class="n">phone</span> <span class="o">=</span> <span class="n">Phone</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">number</span><span class="o">=</span><span class="n">call</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">GET</span><span class="p">[</span><span class="s">&#39;phone&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">call</span><span class="p">(</span><span class="n">phone</span><span class="p">)</span> <span class="c"># phone is added to *args passed to decorated function</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@with_phone</span>
</span><span class='line'><span class="k">def</span> <span class="nf">some_view</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">phone</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># ... some code using phone</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works with named arguments too, and is probably a better way since you won&rsquo;t run into problems with arguments order.</p>

<h3>Decorators with arguments</h3>

<p>To get these you just add your arguments after <code>call</code> as in this <a href="http://hackflow.com/blog/2013/10/08/abstracting-control-flow/">control flow abstracting</a> retry decorator:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@decorator</span>
</span><span class='line'><span class="k">def</span> <span class="nf">retry</span><span class="p">(</span><span class="n">call</span><span class="p">,</span> <span class="n">tries</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="ne">Exception</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">attempt</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">tries</span><span class="p">):</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">call</span><span class="p">()</span>
</span><span class='line'>        <span class="k">except</span> <span class="n">errors</span><span class="p">:</span>
</span><span class='line'>            <span class="c"># Reraise error on last attempt</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">attempt</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">==</span> <span class="n">tries</span><span class="p">:</span>
</span><span class='line'>                <span class="k">raise</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Why use that?</h2>

<p>There are obvious reasons: to reduce clutter and expose your intentions. However, there is usual cost. This as any abstraction brings an additional layer of complexity on top of python. And python could be seen as a layer on top of c, and that as one above asm, and that &hellip;</p>

<p>You can choose for yourself what level is too high. And if python is sometimes not enough high level language for you then you should definitely upgrade it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Python Made Easy]]></title>
    <link href="http://hackflow.com/blog/2013/10/13/functional-python-made-easy/"/>
    <updated>2013-10-13T19:22:00+08:00</updated>
    <id>http://hackflow.com/blog/2013/10/13/functional-python-made-easy</id>
    <content type="html"><![CDATA[<p>There are a lot of buzz about Haskell, Lisp, Erlang and other languages few people code in. But while they play their role as banners, functional programming sneaks into our code in multi-paradigm languages.</p>

<p>I was going to continue this way and later introduce my library of a variety of functional tricks, but suddenly realized it&rsquo;s not about FP, it&rsquo;s about utility. And that&rsquo;s what I will focus on below trying to show you real-life value of <a href="https://github.com/Suor/funcy">funcy</a>.</p>

<!--more-->


<p>Funcy started from a try to bunch up a couple of data manipulation utils. Therefore most of my examples will be about that. Some of them may seem trivial to you, but there are many gains these tiny tools can offer you both in terms of code brevity and expressiveness. Or they&rsquo;ll just save your time, still good.</p>

<p>I&rsquo;ll go through the typical tasks any python programmer face during her day.</p>

<h2>Everyday data manipulation</h2>

<p><em>1. Flatten list of lists. That&rsquo;s how you usually do it:</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">operator</span> <span class="kn">import</span> <span class="n">concat</span>
</span><span class='line'><span class="nb">reduce</span><span class="p">(</span><span class="n">concat</span><span class="p">,</span> <span class="n">list_of_lists</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># or that:</span>
</span><span class='line'><span class="nb">sum</span><span class="p">(</span><span class="n">list_of_lists</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'>
</span><span class='line'><span class="c"># or that:</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">chain</span>
</span><span class='line'><span class="nb">list</span><span class="p">(</span><span class="n">chain</span><span class="o">.</span><span class="n">from_iterable</span><span class="p">(</span><span class="n">list_of_lists</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>They all work and all have their flaws: require imports, additional calls or restrict what you can pass into. But the main flaw is that they are all patterns not obvious calls. There should be a simple function to do such a simple and common thing and there is one in funcy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">funcy</span> <span class="kn">import</span> <span class="n">cat</span>
</span><span class='line'><span class="n">cat</span><span class="p">(</span><span class="n">list_of_lists</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>cat</code> joins list of lists, tuples, iterators and generally any iterables into single list. And it comes with extra shortcut if you want to <code>cat</code> results of <code>map</code> call. For example, this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">funcy</span> <span class="kn">import</span> <span class="n">mapcat</span>
</span><span class='line'><span class="n">mapcat</span><span class="p">(</span><span class="nb">str</span><span class="o">.</span><span class="n">splitlines</span><span class="p">,</span> <span class="n">bunch_of_texts</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>will result in flat list of all lines of all the texts. There are lazy versions of both functions: <code>icat</code> and <code>imapcat</code>.</p>

<p><em>2. Merge some dicts. There are several clumsy ways in python:</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">d1</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">d2</span><span class="p">)</span>  <span class="c"># Changes d1</span>
</span><span class='line'><span class="nb">dict</span><span class="p">(</span><span class="n">d1</span><span class="p">,</span> <span class="o">**</span><span class="n">d2</span><span class="p">)</span> <span class="c"># Really awkward for more than 2 dicts</span>
</span><span class='line'>
</span><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="n">d1</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span><span class='line'><span class="n">d</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">d2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I always wondered why one can&rsquo;t just add them up, but that&rsquo;s what we have. Anyway, this is also easy in funcy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">funcy</span> <span class="kn">import</span> <span class="n">merge</span><span class="p">,</span> <span class="n">join</span>
</span><span class='line'><span class="n">merge</span><span class="p">(</span><span class="n">d1</span><span class="p">,</span> <span class="n">d2</span><span class="p">)</span>
</span><span class='line'><span class="n">merge</span><span class="p">(</span><span class="n">d1</span><span class="p">,</span> <span class="n">d2</span><span class="p">,</span> <span class="n">d3</span><span class="p">)</span>
</span><span class='line'><span class="n">join</span><span class="p">(</span><span class="n">sequence_of_dicts</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The best part here is these are omnivorous. They work with anything: sets, dicts, ordered dicts, lists, tuples, iterators, even strings, carefully preserving collection type.</p>

<p><em>3. Capturing something with regular expression. A usual way:</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">some_re</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">m</span><span class="p">:</span>
</span><span class='line'>    <span class="n">actual_match</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">()</span> <span class="c"># or m.group(i) or m.groups()</span>
</span><span class='line'>    <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Much more straightforward with funcy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">funcy</span> <span class="kn">import</span> <span class="n">re_find</span>
</span><span class='line'><span class="n">actual_match</span> <span class="o">=</span> <span class="n">re_find</span><span class="p">(</span><span class="n">some_re</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Still not impressed? Then look here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">funcy</span> <span class="kn">import</span> <span class="n">re_finder</span><span class="p">,</span> <span class="n">re_all</span><span class="p">,</span> <span class="n">partial</span><span class="p">,</span> <span class="n">mapcat</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Get a number out of every word</span>
</span><span class='line'><span class="nb">map</span><span class="p">(</span><span class="n">re_finder</span><span class="p">(</span><span class="s">&#39;\d+&#39;</span><span class="p">),</span> <span class="n">words</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Parse simple ini file into dict</span>
</span><span class='line'><span class="c"># (re_finder returns tuples when there is more that one capture in regexp)</span>
</span><span class='line'><span class="nb">dict</span><span class="p">(</span><span class="n">imap</span><span class="p">(</span><span class="n">re_finder</span><span class="p">(</span><span class="s">&#39;(\w+)=(\w+)&#39;</span><span class="p">),</span> <span class="n">ini</span><span class="o">.</span><span class="n">splitlines</span><span class="p">()))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Find all numbers in all the strings and return as flat list</span>
</span><span class='line'><span class="n">mapcat</span><span class="p">(</span><span class="n">partial</span><span class="p">(</span><span class="n">re_all</span><span class="p">,</span> <span class="s">r&#39;\d+&#39;</span><span class="p">),</span> <span class="n">bunch_of_strings</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>About imports and practicality</h2>

<p>As you can see I import everything directly from funcy, not using any sub-packages. The reason it&rsquo;s designed this way is practicality. That would be too annoying to remember where each one tiny thing comes from. There are enough libraries to clutter your file heads anyway.</p>

<p>This also enables you to write:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">funcy</span> <span class="kn">import</span> <span class="o">*</span>
</span></code></pre></td></tr></table></div></figure>


<p>And start enjoying all functional python niceness right away. Ok, now when you know where all the stuff is kept I won&rsquo;t repeat imports in every new example.</p>

<h2>A bit more functional things</h2>

<p>We&rsquo;ve seen a pair of examples of higher order functions earlier, particularly <code>re_finder</code> and <code>partial</code>. One thing to note is that <code>re_finder</code> itself is a partial application of <code>re_find</code> meant to be used with <code>map</code> and friends. Naturally, there is a similar utility to be used with <code>filter</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Choose all private attributes of an object</span>
</span><span class='line'><span class="n">is_private</span> <span class="o">=</span> <span class="n">re_tester</span><span class="p">(</span><span class="s">&#39;^_&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nb">filter</span><span class="p">(</span><span class="n">is_private</span><span class="p">,</span> <span class="nb">dir</span><span class="p">(</span><span class="n">some_obj</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can create a bunch of predicates and filter with them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">is_special</span> <span class="o">=</span> <span class="n">re_tester</span><span class="p">(</span><span class="s">&#39;^__.+__$&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">is_const</span> <span class="o">=</span> <span class="n">re_tester</span><span class="p">(</span><span class="s">&#39;^[A-Z_]+$&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nb">filter</span><span class="p">(</span><span class="o">...</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>But what if we want to apply several of them at once or use some predicate logic. That&rsquo;s easy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">is_public</span> <span class="o">=</span> <span class="n">complement</span><span class="p">(</span><span class="n">is_private</span><span class="p">)</span>
</span><span class='line'><span class="n">is_private_const</span> <span class="o">=</span> <span class="n">all_fn</span><span class="p">(</span><span class="n">is_private</span><span class="p">,</span> <span class="n">is_const</span><span class="p">)</span>
</span><span class='line'><span class="n">either_const_or_public</span> <span class="o">=</span> <span class="n">any_fn</span><span class="p">(</span><span class="n">is_const</span><span class="p">,</span> <span class="n">is_public</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or you can use convenience function complementary to <code>filter</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">remove</span><span class="p">(</span><span class="n">is_private</span><span class="p">,</span> <span class="o">...</span><span class="p">)</span> <span class="c"># same as filter(is_public)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I hope everyone have their functional appetite satisfied so we can switch to something less abstract.</p>

<h2>Collections</h2>

<p>Aside from <a href="http://funcy.readthedocs.org/en/latest/seqs.html">sequence utilities</a>, funcy provides lots of ones to work with collections.
And the two fundamental are <code>walk</code> and <code>select</code>, a versions of <code>map</code> and <code>filter</code> preserving collection type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">walk</span><span class="p">(</span><span class="n">inc</span><span class="p">,</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">})</span> <span class="c"># -&gt; {2, 3, 4}</span>
</span><span class='line'><span class="n">walk</span><span class="p">(</span><span class="n">inc</span><span class="p">,</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span> <span class="c"># -&gt; (2, 3, 4)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Mapping function receives pairs when walking dicts</span>
</span><span class='line'><span class="n">swap</span> <span class="o">=</span> <span class="k">lambda</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">):</span> <span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">k</span><span class="p">)</span>
</span><span class='line'><span class="n">walk</span><span class="p">(</span><span class="n">swap</span><span class="p">,</span> <span class="p">{</span><span class="mi">1</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="mi">20</span><span class="p">})</span>
</span><span class='line'><span class="c"># -&gt; {10: 1, 20: 2}</span>
</span><span class='line'>
</span><span class='line'><span class="n">select</span><span class="p">(</span><span class="n">even</span><span class="p">,</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">})</span>
</span><span class='line'><span class="c"># -&gt; {2, 10, 20}</span>
</span><span class='line'>
</span><span class='line'><span class="n">select</span><span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">):</span> <span class="n">k</span> <span class="o">==</span> <span class="n">v</span><span class="p">,</span> <span class="p">{</span><span class="mi">1</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="mi">3</span><span class="p">})</span>
</span><span class='line'><span class="c"># -&gt; {1: 1}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This pair of functions is backed up with a set of ones to work with dicts: <code>walk_keys</code>, <code>walk_values</code>, <code>select_keys</code>, <code>select_values</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Get a dict of public attributes of an instance</span>
</span><span class='line'><span class="n">select_keys</span><span class="p">(</span><span class="n">is_public</span><span class="p">,</span> <span class="n">instance</span><span class="o">.</span><span class="n">__dict__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Clean dict of falsy values</span>
</span><span class='line'><span class="n">select_values</span><span class="p">(</span><span class="nb">bool</span><span class="p">,</span> <span class="n">some_dict</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The last example in this section will include several new functions at once: <code>silent</code> &ndash; catches all exceptions in passed function, returning <code>None</code>; <code>compact</code> &ndash; removes falsy values from collection; <code>walk_values</code> &ndash; maps dict values with given function. Anyhow, this line constructs a dict of integer params from typical stringy request dict you get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">compact</span><span class="p">(</span><span class="n">walk_values</span><span class="p">(</span><span class="n">silent</span><span class="p">(</span><span class="nb">int</span><span class="p">),</span> <span class="n">request_dict</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Back to data manipulation</h2>

<p>Finally, the interesting part. I included some examples here just because they seem cool. Although, I did this earlier to be honest. Anyway, let&rsquo;s split and group:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># split absolute and relative urls</span>
</span><span class='line'><span class="n">absolute</span><span class="p">,</span> <span class="n">relative</span> <span class="o">=</span> <span class="n">split</span><span class="p">(</span><span class="n">re_tester</span><span class="p">(</span><span class="s">r&#39;^http://&#39;</span><span class="p">),</span> <span class="n">urls</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># group posts by category</span>
</span><span class='line'><span class="n">group_by</span><span class="p">(</span><span class="k">lambda</span> <span class="n">post</span><span class="p">:</span> <span class="n">post</span><span class="o">.</span><span class="n">category</span><span class="p">,</span> <span class="n">posts</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Partition and chunk:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># make a dict from flat list of pairs</span>
</span><span class='line'><span class="nb">dict</span><span class="p">(</span><span class="n">partition</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">flat_list_of_pairs</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># make a structures from flat list</span>
</span><span class='line'><span class="p">{</span><span class="nb">id</span><span class="p">:</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">password</span><span class="p">)</span> <span class="k">for</span> <span class="nb">id</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">password</span> <span class="ow">in</span> <span class="n">partition</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">users</span><span class="p">)}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># check versions are consecutive</span>
</span><span class='line'><span class="k">assert</span> <span class="nb">all</span><span class="p">(</span><span class="n">prev</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">==</span> <span class="nb">next</span> <span class="k">for</span> <span class="n">prev</span><span class="p">,</span> <span class="nb">next</span> <span class="ow">in</span> <span class="n">partition</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">versions</span><span class="p">)):</span>
</span><span class='line'>
</span><span class='line'><span class="c"># process data by chunks</span>
</span><span class='line'><span class="k">for</span> <span class="n">chunk</span> <span class="ow">in</span> <span class="n">chunks</span><span class="p">(</span><span class="n">CHUNK_SIZE</span><span class="p">,</span> <span class="n">lots_of_data</span><span class="p">):</span>
</span><span class='line'>    <span class="n">process</span><span class="p">(</span><span class="n">chunk</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And a couple more, just for fun:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># add new line indents at the beginning of each paragraph</span>
</span><span class='line'><span class="k">for</span> <span class="n">line</span><span class="p">,</span> <span class="n">prev</span> <span class="ow">in</span> <span class="n">with_prev</span><span class="p">(</span><span class="n">text</span><span class="o">.</span><span class="n">splitlines</span><span class="p">()):</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">prev</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;    &#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">line</span>
</span><span class='line'>
</span><span class='line'><span class="c"># select Shakespeare&#39;s play written in 1611</span>
</span><span class='line'><span class="n">where</span><span class="p">(</span><span class="n">plays</span><span class="p">,</span> <span class="n">author</span><span class="o">=</span><span class="s">&quot;Shakespeare&quot;</span><span class="p">,</span> <span class="n">year</span><span class="o">=</span><span class="mi">1611</span><span class="p">)</span>
</span><span class='line'><span class="c"># =&gt; [{&quot;title&quot;: &quot;Cymbeline&quot;, &quot;author&quot;: &quot;Shakespeare&quot;, &quot;year&quot;: 1611},</span>
</span><span class='line'><span class="c">#     {&quot;title&quot;: &quot;The Tempest&quot;, &quot;author&quot;: &quot;Shakespeare&quot;, &quot;year&quot;: 1611}]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>More than just a library</h2>

<p>Maybe some of you recognized some functions from Clojure or Underscore.js (Shakespear example was shamelessly ripped of the docs of the latter, for example). That should not surprise you, in many respects I drew inspiration from these two sources. Nonetheless I followed python spirit and stayed practical as far as I could.</p>

<p>And one more thought. We used to call programming languages languages, still rarely think of keywords and functions as words. We define our own words by writing new functions, but they are usually too specific to make it into our everyday use. Funcy utilities are designed the other way around, to be broadly used as a layer over python and it&rsquo;s standard library.</p>

<p>So, how about <a href="https://github.com/Suor/funcy">extending your vocabulary</a>?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Abstracting Control Flow]]></title>
    <link href="http://hackflow.com/blog/2013/10/08/abstracting-control-flow/"/>
    <updated>2013-10-08T12:13:00+08:00</updated>
    <id>http://hackflow.com/blog/2013/10/08/abstracting-control-flow</id>
    <content type="html"><![CDATA[<p>Any programmer, even if she doesn&rsquo;t see it this way, constantly creates abstractions. The most common things we abstract are calculations (caught into functions) or behavior (procedures and classes), but there are other recurring patterns in our work, especially in error handling, resource management and optimizations.</p>

<p>Those recurring patterns usually involve rules like &ldquo;close everything you open&rdquo;, &ldquo;free resources then pass error farther&rdquo;, &ldquo;if that succeeded go on else &hellip;&rdquo;, which commonly look like repetitive <code>if ... else</code> or <code>try ... catch</code> code. How about abstracting all that control flow?</p>

<p> <!--more--></p>

<p>In conventional code, where nobody plays too smart, control structures do control flow. Sometimes they don&rsquo;t do that well and then we throw in our own. That is simple in Lisp, Ruby or Perl, but is also possible in a way in any language featuring higher order functions.</p>

<h2>Abstractions</h2>

<p>Let&rsquo;s start from the beginning. What do we do to build a new abstraction?</p>

<ol>
<li>Select a piece of functionality or behavior.</li>
<li>Name it.</li>
<li>Implement it.</li>
<li>Hide our implementation behind chosen name.</li>
</ol>


<p>Points 3-4 are not always possible. It depends very much on flexibility of your language and the piece you are trying to abstract.</p>

<p>In case your language can&rsquo;t handle it, skip implementation and just describe your technique, make it popular, giving birth to a new design pattern. This way you can continue writing repetitive code without feeling bad about it.</p>

<h2>Back to real-life</h2>

<p>This is a piece of common python code, taken from real-life project with minimal changes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">urls</span> <span class="o">=</span> <span class="o">...</span>
</span><span class='line'><span class="n">photos</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">url</span> <span class="ow">in</span> <span class="n">urls</span><span class="p">:</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">attempt</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">DOWNLOAD_TRIES</span><span class="p">):</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">photos</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">download_image</span><span class="p">(</span><span class="n">url</span><span class="p">))</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>        <span class="k">except</span> <span class="n">ImageTooSmall</span><span class="p">:</span>
</span><span class='line'>            <span class="k">pass</span> <span class="c"># skip small images</span>
</span><span class='line'>        <span class="k">except</span> <span class="p">(</span><span class="n">urllib2</span><span class="o">.</span><span class="n">URLError</span><span class="p">,</span> <span class="n">httplib</span><span class="o">.</span><span class="n">BadStatusLine</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">error</span><span class="p">),</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">attempt</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">==</span> <span class="n">DOWNLOAD_TRIES</span><span class="p">:</span>
</span><span class='line'>                <span class="k">raise</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are many aspects to this code: iterating over <code>urls</code>, downloading images, collecting images into <code>photos</code>, skipping small images and retries in case of download errors. All of them are entangled in this single piece of code, despite that they can be useful outside of this code snippet.</p>

<p>And some of them already exist separately. For example, iteration plus result gathering make <code>map</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">photos</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="n">download_image</span><span class="p">,</span> <span class="n">urls</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s try fishing out other aspects, starting with skipping small images. That could be done like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@contextmanager</span>
</span><span class='line'><span class="k">def</span> <span class="nf">ignore</span><span class="p">(</span><span class="n">error</span><span class="p">):</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="k">yield</span>
</span><span class='line'>    <span class="k">except</span> <span class="n">error</span><span class="p">:</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="n">photos</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">url</span> <span class="ow">in</span> <span class="n">urls</span><span class="p">:</span>
</span><span class='line'>    <span class="k">with</span> <span class="n">ignore</span><span class="p">(</span><span class="n">ImageTooSmall</span><span class="p">):</span>
</span><span class='line'>        <span class="n">photos</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">download_image</span><span class="p">(</span><span class="n">url</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looks good. However this can&rsquo;t be composed with <code>map</code> easily. But let&rsquo;s put it off for now and deal with network errors. We can try abstracting it the same way we handled <code>ignore</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">with</span> <span class="n">retry</span><span class="p">(</span><span class="n">DOWNLOAD_TRIES</span><span class="p">,</span> <span class="p">(</span><span class="n">urllib2</span><span class="o">.</span><span class="n">URLError</span><span class="p">,</span> <span class="n">httplib</span><span class="o">.</span><span class="n">BadStatusLine</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">error</span><span class="p">)):</span>
</span><span class='line'>    <span class="c"># ... do stuff</span>
</span></code></pre></td></tr></table></div></figure>


<p>Only that can&rsquo;t be implemented. Python <code>with</code> statement can&rsquo;t run its block more than once. We just ran against language constraint. It&rsquo;s important to notice such cases if you want to understand languages differences beyond syntax. In Ruby and to lesser extend in Perl we could continue manipulating blocks, in Lisp we could even manipulate code (that would probably be an overkill), but not all is lost for Python, we should just switch to higher order functions and their convenience concept &ndash; decorators:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@decorator</span>
</span><span class='line'><span class="k">def</span> <span class="nf">retry</span><span class="p">(</span><span class="n">call</span><span class="p">,</span> <span class="n">tries</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="ne">Exception</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">attempt</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">tries</span><span class="p">):</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">call</span><span class="p">()</span>
</span><span class='line'>        <span class="k">except</span> <span class="n">errors</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">attempt</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">==</span> <span class="n">tries</span><span class="p">:</span>
</span><span class='line'>                <span class="k">raise</span>
</span><span class='line'>
</span><span class='line'><span class="n">http_retry</span> <span class="o">=</span> <span class="n">retry</span><span class="p">(</span><span class="n">DOWNLOAD_TRIES</span><span class="p">,</span> <span class="p">(</span><span class="n">urllib2</span><span class="o">.</span><span class="n">URLError</span><span class="p">,</span> <span class="n">httplib</span><span class="o">.</span><span class="n">BadStatusLine</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">error</span><span class="p">))</span>
</span><span class='line'><span class="n">photos</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="n">http_retry</span><span class="p">(</span><span class="n">download_image</span><span class="p">),</span> <span class="n">urls</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we can see, it even works with <code>map</code> naturally. And more than that, we got a pair of potentially reusable tools: <code>retry</code> and <code>http_retry</code>. Unfortunately our <code>ignore</code> context manager can&rsquo;t be easily added here. It&rsquo;s not composable. Let&rsquo;s just rewrite it as decorator:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@decorator</span>
</span><span class='line'><span class="k">def</span> <span class="nf">ignore</span><span class="p">(</span><span class="n">call</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="ne">Exception</span><span class="p">):</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">call</span><span class="p">()</span>
</span><span class='line'>    <span class="k">except</span> <span class="n">errors</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'><span class="n">ignore_small</span> <span class="o">=</span> <span class="n">ignore</span><span class="p">(</span><span class="n">ImageTooSmall</span><span class="p">)</span>
</span><span class='line'><span class="n">http_retry</span> <span class="o">=</span> <span class="n">retry</span><span class="p">(</span><span class="n">DOWNLOAD_TRIES</span><span class="p">,</span> <span class="p">(</span><span class="n">urllib2</span><span class="o">.</span><span class="n">URLError</span><span class="p">,</span> <span class="n">httplib</span><span class="o">.</span><span class="n">BadStatusLine</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">error</span><span class="p">))</span>
</span><span class='line'><span class="n">download</span> <span class="o">=</span> <span class="n">http_retry</span><span class="p">(</span><span class="n">ignore_small</span><span class="p">(</span><span class="n">download_image</span><span class="p">))</span>
</span><span class='line'><span class="n">photos</span> <span class="o">=</span> <span class="nb">filter</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="nb">map</span><span class="p">(</span><span class="n">download</span><span class="p">,</span> <span class="n">urls</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>How is this better?</h2>

<p>Seems like we have more code now and it still involves all the same aspects. The difference is that they are not entangled anymore they are composed. Which means several things:</p>

<ul>
<li>every single aspect is visible,</li>
<li>it&rsquo;s named,</li>
<li>it can be taken out and brought back easily,</li>
<li>it can be reused.</li>
</ul>


<p>The essential code takes only 4 last lines and after getting used to functional control flow can probably become more readable. Or not, that&rsquo;s subjective. Still I hope this post will help somebody to write better code.</p>

<p><strong>P.S.</strong> I packed <code>@decorator</code>, <code>ignore</code> and <code>retry</code> into <a href="https://github.com/Suor/funcy">one practical library</a>.</p>

<p><strong>P.P.S.</strong> Other examples of control flow abstractions include: <a href="http://underscorejs.org/#functions">function manipulations in underscore.js</a>, list comprehensions and generator expressions, <a href="https://github.com/Suor/patterns">pattern matching</a>, <a href="https://github.com/Suor/overload">function overload</a>, caching decorators and much more.</p>
]]></content>
  </entry>
  
</feed>
